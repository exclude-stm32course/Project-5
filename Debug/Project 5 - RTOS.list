
Project 5 - RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e2c  08006e2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006e2c  08006e2c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e2c  08006e2c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d64  20000010  08006e44  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d74  08006e44  00021d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6b7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000369e  00000000  00000000  0003e6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f0  00000000  00000000  00041d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  00043588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000036a6  00000000  00000000  00044bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014b30  00000000  00000000  00048296  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c19d7  00000000  00000000  0005cdc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e79d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065fc  00000000  00000000  0011e818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d0c 	.word	0x08006d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006d0c 	.word	0x08006d0c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fc14 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f84c 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f94a 	bl	8000474 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001e0:	f000 f8a8 	bl	8000334 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001e4:	f000 f8e6 	bl	80003b4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e8:	f000 f922 	bl	8000430 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f002 ff5c 	bl	80030a8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_job */
  mutex_jobHandle = osMutexNew(&mutex_job_attributes);
 80001f0:	4814      	ldr	r0, [pc, #80]	; (8000244 <main+0x74>)
 80001f2:	f003 f899 	bl	8003328 <osMutexNew>
 80001f6:	4602      	mov	r2, r0
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <main+0x78>)
 80001fa:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_job */
  sem_jobHandle = osSemaphoreNew(5, 5, &sem_job_attributes);
 80001fc:	4a13      	ldr	r2, [pc, #76]	; (800024c <main+0x7c>)
 80001fe:	2105      	movs	r1, #5
 8000200:	2005      	movs	r0, #5
 8000202:	f003 f9d9 	bl	80035b8 <osSemaphoreNew>
 8000206:	4602      	mov	r2, r0
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <main+0x80>)
 800020a:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of itemQueue */
  itemQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &itemQueue_attributes);
 800020c:	4a11      	ldr	r2, [pc, #68]	; (8000254 <main+0x84>)
 800020e:	2102      	movs	r1, #2
 8000210:	2005      	movs	r0, #5
 8000212:	f003 fb2d 	bl	8003870 <osMessageQueueNew>
 8000216:	4602      	mov	r2, r0
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <main+0x88>)
 800021a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Producer */
  ProducerHandle = osThreadNew(producer_func, NULL, &Producer_attributes);
 800021c:	4a0f      	ldr	r2, [pc, #60]	; (800025c <main+0x8c>)
 800021e:	2100      	movs	r1, #0
 8000220:	480f      	ldr	r0, [pc, #60]	; (8000260 <main+0x90>)
 8000222:	f002 ffa9 	bl	8003178 <osThreadNew>
 8000226:	4602      	mov	r2, r0
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <main+0x94>)
 800022a:	601a      	str	r2, [r3, #0]

  /* creation of Consumer */
  ConsumerHandle = osThreadNew(consumer_func, NULL, &Consumer_attributes);
 800022c:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <main+0x98>)
 800022e:	2100      	movs	r1, #0
 8000230:	480e      	ldr	r0, [pc, #56]	; (800026c <main+0x9c>)
 8000232:	f002 ffa1 	bl	8003178 <osThreadNew>
 8000236:	4602      	mov	r2, r0
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <main+0xa0>)
 800023a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800023c:	f002 ff68 	bl	8003110 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x70>
 8000242:	bf00      	nop
 8000244:	08006dd4 	.word	0x08006dd4
 8000248:	20001988 	.word	0x20001988
 800024c:	08006de4 	.word	0x08006de4
 8000250:	20001938 	.word	0x20001938
 8000254:	08006dbc 	.word	0x08006dbc
 8000258:	20001ce0 	.word	0x20001ce0
 800025c:	08006d74 	.word	0x08006d74
 8000260:	08000575 	.word	0x08000575
 8000264:	20001934 	.word	0x20001934
 8000268:	08006d98 	.word	0x08006d98
 800026c:	08000601 	.word	0x08000601
 8000270:	200019f0 	.word	0x200019f0

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b09e      	sub	sp, #120	; 0x78
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f006 fd39 	bl	8006cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	223c      	movs	r2, #60	; 0x3c
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f006 fd2b 	bl	8006cfa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002a4:	2303      	movs	r3, #3
 80002a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 f844 	bl	800135c <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002da:	f000 f9e9 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2302      	movs	r3, #2
 80002e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 ff36 	bl	800216c <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000306:	f000 f9d3 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <SystemClock_Config+0xbc>)
 800030c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000312:	2300      	movs	r3, #0
 8000314:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	4618      	mov	r0, r3
 800031a:	f002 f96d 	bl	80025f8 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000324:	f000 f9c4 	bl	80006b0 <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3778      	adds	r7, #120	; 0x78
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	00020020 	.word	0x00020020

08000334 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_I2C1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_I2C1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <MX_I2C1_Init+0x7c>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_I2C1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036e:	480e      	ldr	r0, [pc, #56]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000370:	f000 fdf0 	bl	8000f54 <HAL_I2C_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037a:	f000 f999 	bl	80006b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037e:	2100      	movs	r1, #0
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000382:	f000 fe76 	bl	8001072 <HAL_I2CEx_ConfigAnalogFilter>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f990 	bl	80006b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000390:	2100      	movs	r1, #0
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000394:	f000 feb8 	bl	8001108 <HAL_I2CEx_ConfigDigitalFilter>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f987 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000193c 	.word	0x2000193c
 80003ac:	40005400 	.word	0x40005400
 80003b0:	2000090e 	.word	0x2000090e

080003b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_SPI1_Init+0x74>)
 80003ba:	4a1c      	ldr	r2, [pc, #112]	; (800042c <MX_SPI1_Init+0x78>)
 80003bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003be:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_SPI1_Init+0x74>)
 80003c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_SPI1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_SPI1_Init+0x74>)
 80003ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_SPI1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_SPI1_Init+0x74>)
 80003e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_SPI1_Init+0x74>)
 80003ea:	2208      	movs	r2, #8
 80003ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_SPI1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_SPI1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_SPI1_Init+0x74>)
 8000402:	2207      	movs	r2, #7
 8000404:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_SPI1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_SPI1_Init+0x74>)
 800040e:	2208      	movs	r2, #8
 8000410:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_SPI1_Init+0x74>)
 8000414:	f002 faa0 	bl	8002958 <HAL_SPI_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800041e:	f000 f947 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	2000198c 	.word	0x2000198c
 800042c:	40013000 	.word	0x40013000

08000430 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <MX_USB_PCD_Init+0x3c>)
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <MX_USB_PCD_Init+0x40>)
 8000438:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USB_PCD_Init+0x3c>)
 800043c:	2208      	movs	r2, #8
 800043e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_USB_PCD_Init+0x3c>)
 8000442:	2202      	movs	r2, #2
 8000444:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USB_PCD_Init+0x3c>)
 8000448:	2202      	movs	r2, #2
 800044a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <MX_USB_PCD_Init+0x3c>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USB_PCD_Init+0x3c>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000458:	4804      	ldr	r0, [pc, #16]	; (800046c <MX_USB_PCD_Init+0x3c>)
 800045a:	f000 fea1 	bl	80011a0 <HAL_PCD_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000464:	f000 f924 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200019f4 	.word	0x200019f4
 8000470:	40005c00 	.word	0x40005c00

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048a:	4b37      	ldr	r3, [pc, #220]	; (8000568 <MX_GPIO_Init+0xf4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a36      	ldr	r2, [pc, #216]	; (8000568 <MX_GPIO_Init+0xf4>)
 8000490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b34      	ldr	r3, [pc, #208]	; (8000568 <MX_GPIO_Init+0xf4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4b31      	ldr	r3, [pc, #196]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a30      	ldr	r2, [pc, #192]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a2a      	ldr	r2, [pc, #168]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b28      	ldr	r3, [pc, #160]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a24      	ldr	r2, [pc, #144]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000502:	2200      	movs	r2, #0
 8000504:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000508:	4818      	ldr	r0, [pc, #96]	; (800056c <MX_GPIO_Init+0xf8>)
 800050a:	f000 fd0b 	bl	8000f24 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800050e:	2337      	movs	r3, #55	; 0x37
 8000510:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_GPIO_Init+0xfc>)
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4619      	mov	r1, r3
 8000520:	4812      	ldr	r0, [pc, #72]	; (800056c <MX_GPIO_Init+0xf8>)
 8000522:	f000 fb85 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000526:	f64f 7308 	movw	r3, #65288	; 0xff08
 800052a:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4619      	mov	r1, r3
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <MX_GPIO_Init+0xf8>)
 8000540:	f000 fb76 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000544:	2301      	movs	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f000 fb69 	bl	8000c30 <HAL_GPIO_Init>

}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	; 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	48001000 	.word	0x48001000
 8000570:	10120000 	.word	0x10120000

08000574 <producer_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_producer_func */
void producer_func(void *argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	osStatus_t status;

	uint16_t msg = 0x1;
 800057c:	2301      	movs	r3, #1
 800057e:	81fb      	strh	r3, [r7, #14]
	int timeout = 0x0;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]

	for(;;)
	{
		status = osSemaphoreAcquire(sem_jobHandle, 0);
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <producer_func+0x7c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f003 f8b2 	bl	80036f4 <osSemaphoreAcquire>
 8000590:	6138      	str	r0, [r7, #16]
		if(osOK != status) goto end;
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d11d      	bne.n	80005d4 <producer_func+0x60>
		osMutexAcquire(mutex_jobHandle, 0);
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <producer_func+0x80>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 ff5c 	bl	800345c <osMutexAcquire>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005aa:	4813      	ldr	r0, [pc, #76]	; (80005f8 <producer_func+0x84>)
 80005ac:	f000 fcba 	bl	8000f24 <HAL_GPIO_WritePin>
		/* Put a value into the list. */
		status = osMessageQueuePut(itemQueueHandle, &msg, 0, timeout);
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <producer_func+0x88>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	f107 010e 	add.w	r1, r7, #14
 80005ba:	2200      	movs	r2, #0
 80005bc:	f003 f9de 	bl	800397c <osMessageQueuePut>
 80005c0:	6138      	str	r0, [r7, #16]
		osMutexRelease(mutex_jobHandle);
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <producer_func+0x80>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 ffa6 	bl	8003518 <osMutexRelease>
		if(osOK == status) continue;
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d00c      	beq.n	80005ec <producer_func+0x78>

end:
 80005d2:	e000      	b.n	80005d6 <producer_func+0x62>
		if(osOK != status) goto end;
 80005d4:	bf00      	nop
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <producer_func+0x84>)
 80005de:	f000 fca1 	bl	8000f24 <HAL_GPIO_WritePin>
		osDelay(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e6:	f002 fe71 	bl	80032cc <osDelay>
 80005ea:	e7cb      	b.n	8000584 <producer_func+0x10>
		if(osOK == status) continue;
 80005ec:	bf00      	nop
		status = osSemaphoreAcquire(sem_jobHandle, 0);
 80005ee:	e7c9      	b.n	8000584 <producer_func+0x10>
 80005f0:	20001938 	.word	0x20001938
 80005f4:	20001988 	.word	0x20001988
 80005f8:	48001000 	.word	0x48001000
 80005fc:	20001ce0 	.word	0x20001ce0

08000600 <consumer_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumer_func */
void consumer_func(void *argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN consumer_func */
	/* Infinite loop */
	uint16_t msg = 0x0;
 8000608:	2300      	movs	r3, #0
 800060a:	81fb      	strh	r3, [r7, #14]
	int timeout = 0x0;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
	osStatus_t status;
	for(;;)
	{
		status = osSemaphoreRelease(sem_jobHandle);
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <consumer_func+0x7c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f8d3 	bl	80037c0 <osSemaphoreRelease>
 800061a:	6138      	str	r0, [r7, #16]
		if(osOK != status) goto end;
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11d      	bne.n	800065e <consumer_func+0x5e>
		osMutexAcquire(mutex_jobHandle, 0);
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <consumer_func+0x80>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 ff17 	bl	800345c <osMutexAcquire>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000634:	4813      	ldr	r0, [pc, #76]	; (8000684 <consumer_func+0x84>)
 8000636:	f000 fc75 	bl	8000f24 <HAL_GPIO_WritePin>
		status = osMessageQueueGet(itemQueueHandle, &msg, 0, timeout);
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <consumer_func+0x88>)
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	f107 010e 	add.w	r1, r7, #14
 8000644:	2200      	movs	r2, #0
 8000646:	f003 fa0d 	bl	8003a64 <osMessageQueueGet>
 800064a:	6138      	str	r0, [r7, #16]
		osMutexRelease(mutex_jobHandle);
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <consumer_func+0x80>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f002 ff61 	bl	8003518 <osMutexRelease>
		if(osOK == status) continue;
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00c      	beq.n	8000676 <consumer_func+0x76>

end:
 800065c:	e000      	b.n	8000660 <consumer_func+0x60>
		if(osOK != status) goto end;
 800065e:	bf00      	nop
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <consumer_func+0x84>)
 8000668:	f000 fc5c 	bl	8000f24 <HAL_GPIO_WritePin>
		osDelay(1000);
 800066c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000670:	f002 fe2c 	bl	80032cc <osDelay>
 8000674:	e7cc      	b.n	8000610 <consumer_func+0x10>
		if(osOK == status) continue;
 8000676:	bf00      	nop
		status = osSemaphoreRelease(sem_jobHandle);
 8000678:	e7ca      	b.n	8000610 <consumer_func+0x10>
 800067a:	bf00      	nop
 800067c:	20001938 	.word	0x20001938
 8000680:	20001988 	.word	0x20001988
 8000684:	48001000 	.word	0x48001000
 8000688:	20001ce0 	.word	0x20001ce0

0800068c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800069e:	f000 f9c5 	bl	8000a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40012c00 	.word	0x40012c00

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <Error_Handler+0x6>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_MspInit+0x4c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a10      	ldr	r2, [pc, #64]	; (8000704 <HAL_MspInit+0x4c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <HAL_MspInit+0x4c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_MspInit+0x4c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_MspInit+0x4c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_MspInit+0x4c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	210f      	movs	r1, #15
 80006f2:	f06f 0001 	mvn.w	r0, #1
 80006f6:	f000 fa71 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_I2C_MspInit+0x7c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d127      	bne.n	800077a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_I2C_MspInit+0x80>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000742:	23c0      	movs	r3, #192	; 0xc0
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000746:	2312      	movs	r3, #18
 8000748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000752:	2304      	movs	r3, #4
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <HAL_I2C_MspInit+0x84>)
 800075e:	f000 fa67 	bl	8000c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40005400 	.word	0x40005400
 8000788:	40021000 	.word	0x40021000
 800078c:	48000400 	.word	0x48000400

08000790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a17      	ldr	r2, [pc, #92]	; (800080c <HAL_SPI_MspInit+0x7c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d128      	bne.n	8000804 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_SPI_MspInit+0x80>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a16      	ldr	r2, [pc, #88]	; (8000810 <HAL_SPI_MspInit+0x80>)
 80007b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_SPI_MspInit+0x80>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_SPI_MspInit+0x80>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <HAL_SPI_MspInit+0x80>)
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_SPI_MspInit+0x80>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007e2:	23e0      	movs	r3, #224	; 0xe0
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007f2:	2305      	movs	r3, #5
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f000 fa16 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40013000 	.word	0x40013000
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_PCD_MspInit+0x80>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d129      	bne.n	800088a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_PCD_MspInit+0x84>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_PCD_MspInit+0x84>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_PCD_MspInit+0x84>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800084e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000860:	230e      	movs	r3, #14
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f000 f9df 	bl	8000c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_PCD_MspInit+0x84>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_PCD_MspInit+0x84>)
 8000878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_PCD_MspInit+0x84>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40005c00 	.word	0x40005c00
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2019      	movs	r0, #25
 80008b2:	f000 f993 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008b6:	2019      	movs	r0, #25
 80008b8:	f000 f9ac 	bl	8000c14 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <HAL_InitTick+0x9c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <HAL_InitTick+0x9c>)
 80008c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_InitTick+0x9c>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d4:	f107 0210 	add.w	r2, r7, #16
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fe58 	bl	8002594 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008e4:	f001 fe34 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 80008e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <HAL_InitTick+0xa0>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	0c9b      	lsrs	r3, r3, #18
 80008f4:	3b01      	subs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_InitTick+0xa4>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <HAL_InitTick+0xa8>)
 80008fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_InitTick+0xa4>)
 8000900:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000904:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_InitTick+0xa4>)
 8000908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_InitTick+0xa4>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_InitTick+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <HAL_InitTick+0xa4>)
 800091a:	f002 f8c8 	bl	8002aae <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d104      	bne.n	800092e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <HAL_InitTick+0xa4>)
 8000926:	f002 f923 	bl	8002b70 <HAL_TIM_Base_Start_IT>
 800092a:	4603      	mov	r3, r0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3730      	adds	r7, #48	; 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	431bde83 	.word	0x431bde83
 8000940:	20001ce4 	.word	0x20001ce4
 8000944:	40012c00 	.word	0x40012c00

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800097a:	f002 f963 	bl	8002c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20001ce4 	.word	0x20001ce4

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0b      	ldr	r4, [pc, #44]	; (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d6:	f7ff ffd7 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f006 f95f 	bl	8006c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009de:	f7ff fbf7 	bl	80001d0 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f0:	08006e34 	.word	0x08006e34
  ldr r2, =_sbss
 80009f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009f8:	20001d74 	.word	0x20001d74

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x28>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x28>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f8d8 	bl	8000bc6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ff40 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fe4c 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20001d30 	.word	0x20001d30

08000a54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20001d30 	.word	0x20001d30

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff4c 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bee:	f7ff ff61 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000bf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff ffb1 	bl	8000b60 <NVIC_EncodePriority>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff80 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff54 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e154      	b.n	8000eea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8146 	beq.w	8000ee4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d00b      	beq.n	8000c78 <HAL_GPIO_Init+0x48>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d007      	beq.n	8000c78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c6c:	2b11      	cmp	r3, #17
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b12      	cmp	r3, #18
 8000c76:	d130      	bne.n	8000cda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	f003 0201 	and.w	r2, r3, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0xea>
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b12      	cmp	r3, #18
 8000d18:	d123      	bne.n	8000d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0203 	and.w	r2, r3, #3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80a0 	beq.w	8000ee4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dbc:	4a53      	ldr	r2, [pc, #332]	; (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000de6:	d019      	beq.n	8000e1c <HAL_GPIO_Init+0x1ec>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a49      	ldr	r2, [pc, #292]	; (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1e8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_GPIO_Init+0x2e4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1e4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1dc>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e008      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e10:	2303      	movs	r3, #3
 8000e12:	e004      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2e:	4937      	ldr	r1, [pc, #220]	; (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e8a:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f aea3 	bne.w	8000c40 <HAL_GPIO_Init+0x10>
  }
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48000800 	.word	0x48000800
 8000f18:	48000c00 	.word	0x48000c00
 8000f1c:	48001000 	.word	0x48001000
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
 8000f30:	4613      	mov	r3, r2
 8000f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f34:	787b      	ldrb	r3, [r7, #1]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e081      	b.n	800106a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fbc4 	bl	8000708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2224      	movs	r2, #36	; 0x24
 8000f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d107      	bne.n	8000fce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	e006      	b.n	8000fdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d104      	bne.n	8000fee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	ea42 0103 	orr.w	r1, r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	021a      	lsls	r2, r3, #8
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69d9      	ldr	r1, [r3, #28]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2220      	movs	r2, #32
 8001056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b20      	cmp	r3, #32
 8001086:	d138      	bne.n	80010fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001092:	2302      	movs	r3, #2
 8001094:	e032      	b.n	80010fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2224      	movs	r2, #36	; 0x24
 80010a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0201 	orr.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2220      	movs	r2, #32
 80010ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80010fa:	2302      	movs	r3, #2
  }
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b20      	cmp	r3, #32
 800111c:	d139      	bne.n	8001192 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001128:	2302      	movs	r3, #2
 800112a:	e033      	b.n	8001194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	; 0x24
 8001138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800115a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2220      	movs	r2, #32
 8001182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001192:	2302      	movs	r3, #2
  }
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af06      	add	r7, sp, #24
 80011a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0d0      	b.n	8001354 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fb24 	bl	8000814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2203      	movs	r2, #3
 80011d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 ff29 	bl	8003030 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	e04c      	b.n	800127e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	3301      	adds	r3, #1
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	b298      	uxth	r0, r3
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	3336      	adds	r3, #54	; 0x36
 8001222:	4602      	mov	r2, r0
 8001224:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3303      	adds	r3, #3
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	3338      	adds	r3, #56	; 0x38
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	333c      	adds	r3, #60	; 0x3c
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3340      	adds	r3, #64	; 0x40
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3ad      	bcc.n	80011e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e044      	b.n	8001318 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d3b5      	bcc.n	800128e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	687e      	ldr	r6, [r7, #4]
 800132a:	466d      	mov	r5, sp
 800132c:	f106 0410 	add.w	r4, r6, #16
 8001330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	1d33      	adds	r3, r6, #4
 800133a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f001 fe92 	bl	8003066 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800135c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001362:	af00      	add	r7, sp, #0
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	f000 bef4 	b.w	800215e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 816a 	beq.w	800165a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001386:	4bb3      	ldr	r3, [pc, #716]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b04      	cmp	r3, #4
 8001390:	d00c      	beq.n	80013ac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001392:	4bb0      	ldr	r3, [pc, #704]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b08      	cmp	r3, #8
 800139c:	d159      	bne.n	8001452 <HAL_RCC_OscConfig+0xf6>
 800139e:	4bad      	ldr	r3, [pc, #692]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013aa:	d152      	bne.n	8001452 <HAL_RCC_OscConfig+0xf6>
 80013ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d102      	bne.n	80013de <HAL_RCC_OscConfig+0x82>
 80013d8:	4b9e      	ldr	r3, [pc, #632]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0xae>
 80013de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001406:	4b93      	ldr	r3, [pc, #588]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001412:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800141e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001422:	fab2 f282 	clz	r2, r2
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	f002 021f 	and.w	r2, r2, #31
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 810c 	beq.w	8001658 <HAL_RCC_OscConfig+0x2fc>
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8106 	bne.w	8001658 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	f000 be86 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x110>
 800145e:	4b7d      	ldr	r3, [pc, #500]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7c      	ldr	r2, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e030      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x134>
 8001476:	4b77      	ldr	r3, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a76      	ldr	r2, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a73      	ldr	r2, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01e      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x15a>
 800149c:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6c      	ldr	r2, [pc, #432]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a69      	ldr	r2, [pc, #420]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 80014b6:	4b67      	ldr	r3, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a66      	ldr	r2, [pc, #408]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a63      	ldr	r2, [pc, #396]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	f023 020f 	bic.w	r2, r3, #15
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	495d      	ldr	r1, [pc, #372]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d059      	beq.n	80015a0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fab2 	bl	8000a54 <HAL_GetTick>
 80014f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f6:	f7ff faad 	bl	8000a54 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d902      	bls.n	800150c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	f000 be29 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 800150c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001510:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001520:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x1e2>
 8001538:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x20e>
 800153e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001542:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001556:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800155a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001566:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800156e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001572:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001576:	fa92 f2a2 	rbit	r2, r2
 800157a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800157e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001582:	fab2 f282 	clz	r2, r2
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f042 0220 	orr.w	r2, r2, #32
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	f002 021f 	and.w	r2, r2, #31
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ab      	beq.n	80014f6 <HAL_RCC_OscConfig+0x19a>
 800159e:	e05c      	b.n	800165a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fa58 	bl	8000a54 <HAL_GetTick>
 80015a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015aa:	f7ff fa53 	bl	8000a54 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d902      	bls.n	80015c0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f000 bdcf 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80015c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d8:	fab3 f383 	clz	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <HAL_RCC_OscConfig+0x296>
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x2c2>
 80015f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800160e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001622:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001626:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800162a:	fa92 f2a2 	rbit	r2, r2
 800162e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001632:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001636:	fab2 f282 	clz	r2, r2
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	f042 0220 	orr.w	r2, r2, #32
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	f002 021f 	and.w	r2, r2, #31
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ab      	bne.n	80015aa <HAL_RCC_OscConfig+0x24e>
 8001652:	e002      	b.n	800165a <HAL_RCC_OscConfig+0x2fe>
 8001654:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 816f 	beq.w	8001948 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166a:	4bd0      	ldr	r3, [pc, #832]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001676:	4bcd      	ldr	r3, [pc, #820]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d16c      	bne.n	800175c <HAL_RCC_OscConfig+0x400>
 8001682:	4bca      	ldr	r3, [pc, #808]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d166      	bne.n	800175c <HAL_RCC_OscConfig+0x400>
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d102      	bne.n	80016be <HAL_RCC_OscConfig+0x362>
 80016b8:	4bbc      	ldr	r3, [pc, #752]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	e013      	b.n	80016e6 <HAL_RCC_OscConfig+0x38a>
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016e2:	4bb2      	ldr	r3, [pc, #712]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2202      	movs	r2, #2
 80016e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016f0:	fa92 f2a2 	rbit	r2, r2
 80016f4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_RCC_OscConfig+0x3cc>
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d002      	beq.n	8001728 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	f000 bd1b 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	21f8      	movs	r1, #248	; 0xf8
 8001738:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001740:	fa91 f1a1 	rbit	r1, r1
 8001744:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001748:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800174c:	fab1 f181 	clz	r1, r1
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	408b      	lsls	r3, r1
 8001754:	4995      	ldr	r1, [pc, #596]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e0f5      	b.n	8001948 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8085 	beq.w	8001872 <HAL_RCC_OscConfig+0x516>
 8001768:	2301      	movs	r3, #1
 800176a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800177a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	461a      	mov	r2, r3
 8001790:	2301      	movs	r3, #1
 8001792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff f95e 	bl	8000a54 <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff f959 	bl	8000a54 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d902      	bls.n	80017b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f000 bcd5 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x488>
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e013      	b.n	800180c <HAL_RCC_OscConfig+0x4b0>
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2202      	movs	r2, #2
 800180e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001812:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001816:	fa92 f2a2 	rbit	r2, r2
 800181a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800181e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f002 021f 	and.w	r2, r2, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0af      	beq.n	800179e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	21f8      	movs	r1, #248	; 0xf8
 800184e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001856:	fa91 f1a1 	rbit	r1, r1
 800185a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800185e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001862:	fab1 f181 	clz	r1, r1
 8001866:	b2c9      	uxtb	r1, r1
 8001868:	408b      	lsls	r3, r1
 800186a:	4950      	ldr	r1, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e06a      	b.n	8001948 <HAL_RCC_OscConfig+0x5ec>
 8001872:	2301      	movs	r3, #1
 8001874:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001884:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001892:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	461a      	mov	r2, r3
 800189a:	2300      	movs	r3, #0
 800189c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff f8d9 	bl	8000a54 <HAL_GetTick>
 80018a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff f8d4 	bl	8000a54 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d902      	bls.n	80018be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f000 bc50 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x592>
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e013      	b.n	8001916 <HAL_RCC_OscConfig+0x5ba>
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001906:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2202      	movs	r2, #2
 8001918:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800191c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001920:	fa92 f2a2 	rbit	r2, r2
 8001924:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001928:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800192c:	fab2 f282 	clz	r2, r2
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f042 0220 	orr.w	r2, r2, #32
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1af      	bne.n	80018a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80da 	beq.w	8001b0c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d069      	beq.n	8001a36 <HAL_RCC_OscConfig+0x6da>
 8001962:	2301      	movs	r3, #1
 8001964:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x654>)
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2301      	movs	r3, #1
 800198a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff f862 	bl	8000a54 <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001994:	e00e      	b.n	80019b4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff f85d 	bl	8000a54 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d906      	bls.n	80019b4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e3d9      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	10908120 	.word	0x10908120
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019ca:	2202      	movs	r2, #2
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4ba5      	ldr	r3, [pc, #660]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 80019f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019fe:	2102      	movs	r1, #2
 8001a00:	6019      	str	r1, [r3, #0]
 8001a02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f1a3 	rbit	r1, r3
 8001a0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a10:	6019      	str	r1, [r3, #0]
  return result;
 8001a12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0b0      	beq.n	8001996 <HAL_RCC_OscConfig+0x63a>
 8001a34:	e06a      	b.n	8001b0c <HAL_RCC_OscConfig+0x7b0>
 8001a36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a4c:	601a      	str	r2, [r3, #0]
  return result;
 8001a4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b8c      	ldr	r3, [pc, #560]	; (8001c90 <HAL_RCC_OscConfig+0x934>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7fe fff4 	bl	8000a54 <HAL_GetTick>
 8001a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	e009      	b.n	8001a86 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a72:	f7fe ffef 	bl	8000a54 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e36b      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001a86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001aba:	2202      	movs	r2, #2
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001acc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	6019      	str	r1, [r3, #0]
 8001ada:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f1a3 	rbit	r1, r3
 8001ae4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ae8:	6019      	str	r1, [r3, #0]
  return result;
 8001aea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1b2      	bne.n	8001a72 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8158 	beq.w	8001dcc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d112      	bne.n	8001b54 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11a      	bne.n	8001b96 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6c:	f7fe ff72 	bl	8000a54 <HAL_GetTick>
 8001b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e009      	b.n	8001b8a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7fe ff6d 	bl	8000a54 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e2e9      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ef      	beq.n	8001b76 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x852>
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a39      	ldr	r2, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e02f      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x876>
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	e01d      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x89a>
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d06b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7fe ff1c 	bl	8000a54 <HAL_GetTick>
 8001c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe ff17 	bl	8000a54 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e291      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001c3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c56:	2202      	movs	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c68:	601a      	str	r2, [r3, #0]
  return result;
 8001c6a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_OscConfig+0x93c>
 8001c84:	4b01      	ldr	r3, [pc, #4]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	e014      	b.n	8001cb4 <HAL_RCC_OscConfig+0x958>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	10908120 	.word	0x10908120
 8001c94:	40007000 	.word	0x40007000
 8001c98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4bbb      	ldr	r3, [pc, #748]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cb8:	2102      	movs	r1, #2
 8001cba:	6011      	str	r1, [r2, #0]
 8001cbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	fa92 f1a2 	rbit	r1, r2
 8001cc6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001cca:	6011      	str	r1, [r2, #0]
  return result;
 8001ccc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	fab2 f282 	clz	r2, r2
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f002 021f 	and.w	r2, r2, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d099      	beq.n	8001c22 <HAL_RCC_OscConfig+0x8c6>
 8001cee:	e063      	b.n	8001db8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7fe feb0 	bl	8000a54 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe feab 	bl	8000a54 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e225      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001d12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d16:	2202      	movs	r2, #2
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d40:	601a      	str	r2, [r3, #0]
  return result;
 8001d42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0302 	orr.w	r3, r3, #2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_OscConfig+0xa06>
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	e00d      	b.n	8001d7e <HAL_RCC_OscConfig+0xa22>
 8001d62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d66:	2202      	movs	r2, #2
 8001d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d82:	2102      	movs	r1, #2
 8001d84:	6011      	str	r1, [r2, #0]
 8001d86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	fa92 f1a2 	rbit	r1, r2
 8001d90:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d94:	6011      	str	r1, [r2, #0]
  return result;
 8001d96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f002 021f 	and.w	r2, r2, #31
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1a0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	4a76      	ldr	r2, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 81c2 	beq.w	800215c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	f000 819c 	beq.w	800211e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	f040 8114 	bne.w	800201a <HAL_RCC_OscConfig+0xcbe>
 8001df2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e0a:	601a      	str	r2, [r3, #0]
  return result;
 8001e0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	461a      	mov	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7fe fe14 	bl	8000a54 <HAL_GetTick>
 8001e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe fe0f 	bl	8000a54 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e18b      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001e46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_RCC_OscConfig+0xb24>
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e01b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xb5c>
 8001e80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ec0:	6011      	str	r1, [r2, #0]
 8001ec2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	fa92 f1a2 	rbit	r1, r2
 8001ecc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ed0:	6011      	str	r1, [r2, #0]
  return result;
 8001ed2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d19e      	bne.n	8001e32 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	4925      	ldr	r1, [pc, #148]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f28:	601a      	str	r2, [r3, #0]
  return result;
 8001f2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f2e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	461a      	mov	r2, r3
 8001f42:	2301      	movs	r3, #1
 8001f44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fd85 	bl	8000a54 <HAL_GetTick>
 8001f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4e:	e009      	b.n	8001f64 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fd80 	bl	8000a54 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0fc      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001f64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f7c:	601a      	str	r2, [r3, #0]
  return result;
 8001f7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xc48>
 8001f98:	4b01      	ldr	r3, [pc, #4]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e01e      	b.n	8001fdc <HAL_RCC_OscConfig+0xc80>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fe0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe4:	6011      	str	r1, [r2, #0]
 8001fe6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	fa92 f1a2 	rbit	r1, r2
 8001ff0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ff4:	6011      	str	r1, [r2, #0]
  return result;
 8001ff6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d09b      	beq.n	8001f50 <HAL_RCC_OscConfig+0xbf4>
 8002018:	e0a0      	b.n	800215c <HAL_RCC_OscConfig+0xe00>
 800201a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800201e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002032:	601a      	str	r2, [r3, #0]
  return result;
 8002034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002038:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	461a      	mov	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7fe fd00 	bl	8000a54 <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	e009      	b.n	800206e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fcfb 	bl	8000a54 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e077      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 800206e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_OscConfig+0xd4c>
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0xd84>
 80020a8:	f107 0320 	add.w	r3, r7, #32
 80020ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f107 0318 	add.w	r3, r7, #24
 80020c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f107 0210 	add.w	r2, r7, #16
 80020e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020e8:	6011      	str	r1, [r2, #0]
 80020ea:	f107 0210 	add.w	r2, r7, #16
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	fa92 f1a2 	rbit	r1, r2
 80020f4:	f107 020c 	add.w	r2, r7, #12
 80020f8:	6011      	str	r1, [r2, #0]
  return result;
 80020fa:	f107 020c 	add.w	r2, r7, #12
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d19e      	bne.n	800205a <HAL_RCC_OscConfig+0xcfe>
 800211c:	e01e      	b.n	800215c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e018      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002134:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	429a      	cmp	r2, r3
 8002144:	d108      	bne.n	8002158 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002146:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800214a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b09e      	sub	sp, #120	; 0x78
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e162      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	498b      	ldr	r1, [pc, #556]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b89      	ldr	r3, [pc, #548]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e14a      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b82      	ldr	r3, [pc, #520]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	497f      	ldr	r1, [pc, #508]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80dc 	beq.w	8002398 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d13c      	bne.n	8002262 <HAL_RCC_ClockConfig+0xf6>
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <HAL_RCC_ClockConfig+0xa6>
 800220c:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e00f      	b.n	8002232 <HAL_RCC_ClockConfig+0xc6>
 8002212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	663b      	str	r3, [r7, #96]	; 0x60
 8002226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800222e:	4b67      	ldr	r3, [pc, #412]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002236:	65ba      	str	r2, [r7, #88]	; 0x58
 8002238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800223a:	fa92 f2a2 	rbit	r2, r2
 800223e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002242:	fab2 f282 	clz	r2, r2
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f042 0220 	orr.w	r2, r2, #32
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	f002 021f 	and.w	r2, r2, #31
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d17b      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0f3      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d13c      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x178>
 800226a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <HAL_RCC_ClockConfig+0x128>
 800228e:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	e00f      	b.n	80022b4 <HAL_RCC_ClockConfig+0x148>
 8002294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	647b      	str	r3, [r7, #68]	; 0x44
 80022a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40
 80022a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b0:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80022ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022bc:	fa92 f2a2 	rbit	r2, r2
 80022c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d13a      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b2      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
 80022e4:	2302      	movs	r3, #2
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d102      	bne.n	800230c <HAL_RCC_ClockConfig+0x1a0>
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	e00d      	b.n	8002328 <HAL_RCC_ClockConfig+0x1bc>
 800230c:	2302      	movs	r3, #2
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	2202      	movs	r2, #2
 800232a:	61ba      	str	r2, [r7, #24]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	fa92 f2a2 	rbit	r2, r2
 8002332:	617a      	str	r2, [r7, #20]
  return result;
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0220 	orr.w	r2, r2, #32
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e079      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	491a      	ldr	r1, [pc, #104]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002368:	f7fe fb74 	bl	8000a54 <HAL_GetTick>
 800236c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7fe fb70 	bl	8000a54 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e061      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d214      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4906      	ldr	r1, [pc, #24]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e040      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	491a      	ldr	r1, [pc, #104]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4912      	ldr	r1, [pc, #72]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800240e:	f000 f829 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241c:	22f0      	movs	r2, #240	; 0xf0
 800241e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	fa92 f2a2 	rbit	r2, r2
 8002426:	60fa      	str	r2, [r7, #12]
  return result;
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	40d3      	lsrs	r3, r2
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x2ec>)
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	fa21 f303 	lsr.w	r3, r1, r3
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_RCC_ClockConfig+0x2f0>)
 800243c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_RCC_ClockConfig+0x2f4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fa2a 	bl	800089c <HAL_InitTick>
  
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3778      	adds	r7, #120	; 0x78
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	08006df4 	.word	0x08006df4
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x30>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
 8002492:	e03c      	b.n	800250e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002496:	623b      	str	r3, [r7, #32]
      break;
 8002498:	e03c      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	607a      	str	r2, [r7, #4]
  return result;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	40d3      	lsrs	r3, r2
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	220f      	movs	r2, #15
 80024c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	fa92 f2a2 	rbit	r2, r2
 80024d0:	60fa      	str	r2, [r7, #12]
  return result;
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	fab2 f282 	clz	r2, r2
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	40d3      	lsrs	r3, r2
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
 80024fc:	e004      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	623b      	str	r3, [r7, #32]
      break;
 800250c:	e002      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002510:	623b      	str	r3, [r7, #32]
      break;
 8002512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002514:	6a3b      	ldr	r3, [r7, #32]
}
 8002516:	4618      	mov	r0, r3
 8002518:	372c      	adds	r7, #44	; 0x2c
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	08006e0c 	.word	0x08006e0c
 8002530:	08006e1c 	.word	0x08006e1c
 8002534:	003d0900 	.word	0x003d0900

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002556:	f7ff ffef 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800255a:	4601      	mov	r1, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002564:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	fa92 f2a2 	rbit	r2, r2
 8002570:	603a      	str	r2, [r7, #0]
  return result;
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	40d3      	lsrs	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_RCC_GetPCLK2Freq+0x40>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08006e04 	.word	0x08006e04

08002594 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	220f      	movs	r2, #15
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_GetClockConfig+0x60>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0207 	and.w	r2, r3, #7
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40022000 	.word	0x40022000

080025f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b092      	sub	sp, #72	; 0x48
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80d4 	beq.w	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261c:	4b4e      	ldr	r3, [pc, #312]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10e      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	4a4a      	ldr	r2, [pc, #296]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	61d3      	str	r3, [r2, #28]
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002646:	4b45      	ldr	r3, [pc, #276]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d118      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002652:	4b42      	ldr	r3, [pc, #264]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a41      	ldr	r2, [pc, #260]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265e:	f7fe f9f9 	bl	8000a54 <HAL_GetTick>
 8002662:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	e008      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002666:	f7fe f9f5 	bl	8000a54 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b64      	cmp	r3, #100	; 0x64
 8002672:	d901      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e169      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002684:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8084 	beq.w	800279e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d07c      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	461a      	mov	r2, r3
 80026ce:	2301      	movs	r3, #1
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	461a      	mov	r2, r3
 80026f2:	2300      	movs	r3, #0
 80026f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d04b      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe f9a5 	bl	8000a54 <HAL_GetTick>
 800270a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe f9a1 	bl	8000a54 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e113      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002724:	2302      	movs	r3, #2
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	61fb      	str	r3, [r7, #28]
  return result;
 800273c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d108      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002752:	4b01      	ldr	r3, [pc, #4]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	e00d      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
 8002760:	10908100 	.word	0x10908100
 8002764:	2302      	movs	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	4b78      	ldr	r3, [pc, #480]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2202      	movs	r2, #2
 8002776:	613a      	str	r2, [r7, #16]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	fa92 f2a2 	rbit	r2, r2
 800277e:	60fa      	str	r2, [r7, #12]
  return result;
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	fab2 f282 	clz	r2, r2
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f002 021f 	and.w	r2, r2, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f202 	lsl.w	r2, r1, r2
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0b7      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	496a      	ldr	r1, [pc, #424]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4b66      	ldr	r3, [pc, #408]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027d0:	4b60      	ldr	r3, [pc, #384]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f023 0203 	bic.w	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	495d      	ldr	r1, [pc, #372]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ee:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4956      	ldr	r1, [pc, #344]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800280c:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	494e      	ldr	r1, [pc, #312]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800281a:	4313      	orrs	r3, r2
 800281c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f023 0210 	bic.w	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4947      	ldr	r1, [pc, #284]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002838:	4313      	orrs	r3, r2
 800283a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002848:	4b42      	ldr	r3, [pc, #264]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	493f      	ldr	r1, [pc, #252]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f023 0220 	bic.w	r2, r3, #32
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4938      	ldr	r1, [pc, #224]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002874:	4313      	orrs	r3, r2
 8002876:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002884:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	4930      	ldr	r1, [pc, #192]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	4929      	ldr	r1, [pc, #164]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	4921      	ldr	r1, [pc, #132]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	491a      	ldr	r1, [pc, #104]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	4912      	ldr	r1, [pc, #72]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	490b      	ldr	r1, [pc, #44]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002928:	4313      	orrs	r3, r2
 800292a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3748      	adds	r7, #72	; 0x48
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e09d      	b.n	8002aa6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297a:	d009      	beq.n	8002990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
 8002982:	e005      	b.n	8002990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fd fef0 	bl	8000790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d0:	d902      	bls.n	80029d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e002      	b.n	80029de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029e6:	d007      	beq.n	80029f8 <HAL_SPI_Init+0xa0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029f0:	d002      	beq.n	80029f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	ea42 0103 	orr.w	r1, r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	f003 0204 	and.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a74:	ea42 0103 	orr.w	r1, r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e049      	b.n	8002b54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f841 	bl	8002b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f000 f9f1 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d001      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e04a      	b.n	8002c1e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb2:	d013      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_TIM_Base_Start_IT+0xc0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_TIM_Base_Start_IT+0xcc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d115      	bne.n	8002c08 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d015      	beq.n	8002c1a <HAL_TIM_Base_Start_IT+0xaa>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d011      	beq.n	8002c1a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	e008      	b.n	8002c1a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e000      	b.n	8002c1c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	00010007 	.word	0x00010007

08002c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0202 	mvn.w	r2, #2
 8002c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f905 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8f7 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f908 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0204 	mvn.w	r2, #4
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8db 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8cd 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f8de 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0208 	mvn.w	r2, #8
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8b1 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8a3 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f8b4 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0210 	mvn.w	r2, #16
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2208      	movs	r2, #8
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f887 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f879 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f88a 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0201 	mvn.w	r2, #1
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fd fc62 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d107      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f90a 	bl	8003008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e02:	d10e      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f8fd 	bl	800301c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d10e      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d107      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f838 	bl	8002ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d10e      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d107      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0220 	mvn.w	r2, #32
 8002e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f8bd 	bl	8002ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00f      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d00b      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a39      	ldr	r2, [pc, #228]	; (8002fdc <TIM_Base_SetConfig+0x108>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <TIM_Base_SetConfig+0x10c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2d      	ldr	r2, [pc, #180]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01b      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d017      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <TIM_Base_SetConfig+0x108>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <TIM_Base_SetConfig+0x10c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00f      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00f      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d103      	bne.n	8002fc4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	615a      	str	r2, [r3, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800

08002ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003038:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800303c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	b29b      	uxth	r3, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	b29b      	uxth	r3, r3
 800304e:	4013      	ands	r3, r2
 8003050:	b29a      	uxth	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003066:	b084      	sub	sp, #16
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	f107 0014 	add.w	r0, r7, #20
 8003074:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	b004      	add	sp, #16
 80030a6:	4770      	bx	lr

080030a8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030ae:	f3ef 8305 	mrs	r3, IPSR
 80030b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80030b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ba:	f3ef 8310 	mrs	r3, PRIMASK
 80030be:	607b      	str	r3, [r7, #4]
  return(result);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <osKernelInitialize+0x32>
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <osKernelInitialize+0x64>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d109      	bne.n	80030e2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030ce:	f3ef 8311 	mrs	r3, BASEPRI
 80030d2:	603b      	str	r3, [r7, #0]
  return(result);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80030da:	f06f 0305 	mvn.w	r3, #5
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e00c      	b.n	80030fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <osKernelInitialize+0x64>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <osKernelInitialize+0x64>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e002      	b.n	80030fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80030fc:	68fb      	ldr	r3, [r7, #12]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	2000002c 	.word	0x2000002c

08003110 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003116:	f3ef 8305 	mrs	r3, IPSR
 800311a:	60bb      	str	r3, [r7, #8]
  return(result);
 800311c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003122:	f3ef 8310 	mrs	r3, PRIMASK
 8003126:	607b      	str	r3, [r7, #4]
  return(result);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <osKernelStart+0x32>
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <osKernelStart+0x64>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d109      	bne.n	800314a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003136:	f3ef 8311 	mrs	r3, BASEPRI
 800313a:	603b      	str	r3, [r7, #0]
  return(result);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003142:	f06f 0305 	mvn.w	r3, #5
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e00e      	b.n	8003168 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <osKernelStart+0x64>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <osKernelStart+0x64>)
 8003154:	2202      	movs	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003158:	f002 f846 	bl	80051e8 <vTaskStartScheduler>
      stat = osOK;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e002      	b.n	8003168 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003166:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003168:	68fb      	ldr	r3, [r7, #12]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2000002c 	.word	0x2000002c

08003178 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b092      	sub	sp, #72	; 0x48
 800317c:	af04      	add	r7, sp, #16
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003188:	f3ef 8305 	mrs	r3, IPSR
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003190:	2b00      	cmp	r3, #0
 8003192:	f040 8094 	bne.w	80032be <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003196:	f3ef 8310 	mrs	r3, PRIMASK
 800319a:	623b      	str	r3, [r7, #32]
  return(result);
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 808d 	bne.w	80032be <osThreadNew+0x146>
 80031a4:	4b48      	ldr	r3, [pc, #288]	; (80032c8 <osThreadNew+0x150>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d106      	bne.n	80031ba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031ac:	f3ef 8311 	mrs	r3, BASEPRI
 80031b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 8082 	bne.w	80032be <osThreadNew+0x146>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d07e      	beq.n	80032be <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80031c4:	2318      	movs	r3, #24
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80031c8:	2300      	movs	r3, #0
 80031ca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80031cc:	f107 031b 	add.w	r3, r7, #27
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d045      	beq.n	800326a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <osThreadNew+0x74>
        name = attr->name;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <osThreadNew+0x9a>
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	2b38      	cmp	r3, #56	; 0x38
 8003204:	d805      	bhi.n	8003212 <osThreadNew+0x9a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <osThreadNew+0x9e>
        return (NULL);
 8003212:	2300      	movs	r3, #0
 8003214:	e054      	b.n	80032c0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00e      	beq.n	800324c <osThreadNew+0xd4>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b5b      	cmp	r3, #91	; 0x5b
 8003234:	d90a      	bls.n	800324c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <osThreadNew+0xd4>
        mem = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	e010      	b.n	800326e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10c      	bne.n	800326e <osThreadNew+0xf6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d108      	bne.n	800326e <osThreadNew+0xf6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <osThreadNew+0xf6>
          mem = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
 8003268:	e001      	b.n	800326e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b01      	cmp	r3, #1
 8003272:	d110      	bne.n	8003296 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800327c:	9202      	str	r2, [sp, #8]
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003288:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f001 fde4 	bl	8004e58 <xTaskCreateStatic>
 8003290:	4603      	mov	r3, r0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e013      	b.n	80032be <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d110      	bne.n	80032be <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f001 fe2b 	bl	8004f0a <xTaskCreate>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d001      	beq.n	80032be <osThreadNew+0x146>
          hTask = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032be:	697b      	ldr	r3, [r7, #20]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3738      	adds	r7, #56	; 0x38
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	2000002c 	.word	0x2000002c

080032cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032d4:	f3ef 8305 	mrs	r3, IPSR
 80032d8:	613b      	str	r3, [r7, #16]
  return(result);
 80032da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e0:	f3ef 8310 	mrs	r3, PRIMASK
 80032e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <osDelay+0x34>
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <osDelay+0x58>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d109      	bne.n	8003308 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032f4:	f3ef 8311 	mrs	r3, BASEPRI
 80032f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <osDelay+0x3c>
    stat = osErrorISR;
 8003300:	f06f 0305 	mvn.w	r3, #5
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e007      	b.n	8003318 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f001 ff34 	bl	8005180 <vTaskDelay>
    }
  }

  return (stat);
 8003318:	697b      	ldr	r3, [r7, #20]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000002c 	.word	0x2000002c

08003328 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003334:	f3ef 8305 	mrs	r3, IPSR
 8003338:	613b      	str	r3, [r7, #16]
  return(result);
 800333a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 8085 	bne.w	800344c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003342:	f3ef 8310 	mrs	r3, PRIMASK
 8003346:	60fb      	str	r3, [r7, #12]
  return(result);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d17e      	bne.n	800344c <osMutexNew+0x124>
 800334e:	4b42      	ldr	r3, [pc, #264]	; (8003458 <osMutexNew+0x130>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d105      	bne.n	8003362 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003356:	f3ef 8311 	mrs	r3, BASEPRI
 800335a:	60bb      	str	r3, [r7, #8]
  return(result);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d174      	bne.n	800344c <osMutexNew+0x124>
    if (attr != NULL) {
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <osMutexNew+0x48>
      type = attr->attr_bits;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	623b      	str	r3, [r7, #32]
 800336e:	e001      	b.n	8003374 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <osMutexNew+0x5c>
      rmtx = 1U;
 800337e:	2301      	movs	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e001      	b.n	8003388 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d15c      	bne.n	800344c <osMutexNew+0x124>
      mem = -1;
 8003392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003396:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d015      	beq.n	80033ca <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <osMutexNew+0x8c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b4f      	cmp	r3, #79	; 0x4f
 80033ac:	d902      	bls.n	80033b4 <osMutexNew+0x8c>
          mem = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e00c      	b.n	80033ce <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d108      	bne.n	80033ce <osMutexNew+0xa6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <osMutexNew+0xa6>
            mem = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	e001      	b.n	80033ce <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d112      	bne.n	80033fa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4619      	mov	r1, r3
 80033e0:	2004      	movs	r0, #4
 80033e2:	f000 fe05 	bl	8003ff0 <xQueueCreateMutexStatic>
 80033e6:	6278      	str	r0, [r7, #36]	; 0x24
 80033e8:	e016      	b.n	8003418 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4619      	mov	r1, r3
 80033f0:	2001      	movs	r0, #1
 80033f2:	f000 fdfd 	bl	8003ff0 <xQueueCreateMutexStatic>
 80033f6:	6278      	str	r0, [r7, #36]	; 0x24
 80033f8:	e00e      	b.n	8003418 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10b      	bne.n	8003418 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8003406:	2004      	movs	r0, #4
 8003408:	f000 fdda 	bl	8003fc0 <xQueueCreateMutex>
 800340c:	6278      	str	r0, [r7, #36]	; 0x24
 800340e:	e003      	b.n	8003418 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8003410:	2001      	movs	r0, #1
 8003412:	f000 fdd5 	bl	8003fc0 <xQueueCreateMutex>
 8003416:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00c      	beq.n	8003438 <osMutexNew+0x110>
        if (attr != NULL) {
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <osMutexNew+0x104>
          name = attr->name;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e001      	b.n	8003430 <osMutexNew+0x108>
        } else {
          name = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8003430:	6979      	ldr	r1, [r7, #20]
 8003432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003434:	f001 fc8a 	bl	8004d4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <osMutexNew+0x124>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800344e:	4618      	mov	r0, r3
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2000002c 	.word	0x2000002c

0800345c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800347a:	f3ef 8305 	mrs	r3, IPSR
 800347e:	613b      	str	r3, [r7, #16]
  return(result);
 8003480:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003486:	f3ef 8310 	mrs	r3, PRIMASK
 800348a:	60fb      	str	r3, [r7, #12]
  return(result);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <osMutexAcquire+0x4a>
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <osMutexAcquire+0xb8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d109      	bne.n	80034ae <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800349a:	f3ef 8311 	mrs	r3, BASEPRI
 800349e:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <osMutexAcquire+0x52>
    stat = osErrorISR;
 80034a6:	f06f 0305 	mvn.w	r3, #5
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	e02c      	b.n	8003508 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80034b4:	f06f 0303 	mvn.w	r3, #3
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	e025      	b.n	8003508 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d011      	beq.n	80034e6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	69b8      	ldr	r0, [r7, #24]
 80034c6:	f000 fde1 	bl	800408c <xQueueTakeMutexRecursive>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d01b      	beq.n	8003508 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80034d6:	f06f 0301 	mvn.w	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e014      	b.n	8003508 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80034de:	f06f 0302 	mvn.w	r3, #2
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	e010      	b.n	8003508 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	69b8      	ldr	r0, [r7, #24]
 80034ea:	f001 f95f 	bl	80047ac <xQueueSemaphoreTake>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d009      	beq.n	8003508 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80034fa:	f06f 0301 	mvn.w	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e002      	b.n	8003508 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003502:	f06f 0302 	mvn.w	r3, #2
 8003506:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003508:	69fb      	ldr	r3, [r7, #28]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000002c 	.word	0x2000002c

08003518 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003534:	f3ef 8305 	mrs	r3, IPSR
 8003538:	613b      	str	r3, [r7, #16]
  return(result);
 800353a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10f      	bne.n	8003560 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003540:	f3ef 8310 	mrs	r3, PRIMASK
 8003544:	60fb      	str	r3, [r7, #12]
  return(result);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <osMutexRelease+0x48>
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <osMutexRelease+0x9c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d109      	bne.n	8003568 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003554:	f3ef 8311 	mrs	r3, BASEPRI
 8003558:	60bb      	str	r3, [r7, #8]
  return(result);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <osMutexRelease+0x50>
    stat = osErrorISR;
 8003560:	f06f 0305 	mvn.w	r3, #5
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	e01f      	b.n	80035a8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800356e:	f06f 0303 	mvn.w	r3, #3
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	e018      	b.n	80035a8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800357c:	69b8      	ldr	r0, [r7, #24]
 800357e:	f000 fd52 	bl	8004026 <xQueueGiveMutexRecursive>
 8003582:	4603      	mov	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d00f      	beq.n	80035a8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003588:	f06f 0302 	mvn.w	r3, #2
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	e00b      	b.n	80035a8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003590:	2300      	movs	r3, #0
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	69b8      	ldr	r0, [r7, #24]
 8003598:	f000 fe14 	bl	80041c4 <xQueueGenericSend>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d002      	beq.n	80035a8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80035a2:	f06f 0302 	mvn.w	r3, #2
 80035a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80035a8:	69fb      	ldr	r3, [r7, #28]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2000002c 	.word	0x2000002c

080035b8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035c8:	f3ef 8305 	mrs	r3, IPSR
 80035cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80035ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 8088 	bne.w	80036e6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d6:	f3ef 8310 	mrs	r3, PRIMASK
 80035da:	617b      	str	r3, [r7, #20]
  return(result);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8081 	bne.w	80036e6 <osSemaphoreNew+0x12e>
 80035e4:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <osSemaphoreNew+0x138>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d105      	bne.n	80035f8 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035ec:	f3ef 8311 	mrs	r3, BASEPRI
 80035f0:	613b      	str	r3, [r7, #16]
  return(result);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d176      	bne.n	80036e6 <osSemaphoreNew+0x12e>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d073      	beq.n	80036e6 <osSemaphoreNew+0x12e>
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	429a      	cmp	r2, r3
 8003604:	d86f      	bhi.n	80036e6 <osSemaphoreNew+0x12e>
    mem = -1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800360a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d015      	beq.n	800363e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <osSemaphoreNew+0x70>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b4f      	cmp	r3, #79	; 0x4f
 8003620:	d902      	bls.n	8003628 <osSemaphoreNew+0x70>
        mem = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	e00c      	b.n	8003642 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d108      	bne.n	8003642 <osSemaphoreNew+0x8a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <osSemaphoreNew+0x8a>
          mem = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	e001      	b.n	8003642 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003648:	d04d      	beq.n	80036e6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d129      	bne.n	80036a4 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10b      	bne.n	800366e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	2303      	movs	r3, #3
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	2200      	movs	r2, #0
 8003662:	2100      	movs	r1, #0
 8003664:	2001      	movs	r0, #1
 8003666:	f000 fbbf 	bl	8003de8 <xQueueGenericCreateStatic>
 800366a:	6278      	str	r0, [r7, #36]	; 0x24
 800366c:	e005      	b.n	800367a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800366e:	2203      	movs	r2, #3
 8003670:	2100      	movs	r1, #0
 8003672:	2001      	movs	r0, #1
 8003674:	f000 fc2a 	bl	8003ecc <xQueueGenericCreate>
 8003678:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d022      	beq.n	80036c6 <osSemaphoreNew+0x10e>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01f      	beq.n	80036c6 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003686:	2300      	movs	r3, #0
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800368e:	f000 fd99 	bl	80041c4 <xQueueGenericSend>
 8003692:	4603      	mov	r3, r0
 8003694:	2b01      	cmp	r3, #1
 8003696:	d016      	beq.n	80036c6 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8003698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800369a:	f001 fa0c 	bl	8004ab6 <vQueueDelete>
            hSemaphore = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
 80036a2:	e010      	b.n	80036c6 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fd1f 	bl	80040f6 <xQueueCreateCountingSemaphoreStatic>
 80036b8:	6278      	str	r0, [r7, #36]	; 0x24
 80036ba:	e004      	b.n	80036c6 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fd4e 	bl	8004160 <xQueueCreateCountingSemaphore>
 80036c4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <osSemaphoreNew+0x122>
          name = attr->name;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	e001      	b.n	80036de <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80036de:	69f9      	ldr	r1, [r7, #28]
 80036e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036e2:	f001 fb33 	bl	8004d4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3728      	adds	r7, #40	; 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	2000002c 	.word	0x2000002c

080036f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800370c:	f06f 0303 	mvn.w	r3, #3
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e04b      	b.n	80037ac <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003714:	f3ef 8305 	mrs	r3, IPSR
 8003718:	617b      	str	r3, [r7, #20]
  return(result);
 800371a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10f      	bne.n	8003740 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003720:	f3ef 8310 	mrs	r3, PRIMASK
 8003724:	613b      	str	r3, [r7, #16]
  return(result);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <osSemaphoreAcquire+0x4c>
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <osSemaphoreAcquire+0xc4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d128      	bne.n	8003786 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003734:	f3ef 8311 	mrs	r3, BASEPRI
 8003738:	60fb      	str	r3, [r7, #12]
  return(result);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d022      	beq.n	8003786 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003746:	f06f 0303 	mvn.w	r3, #3
 800374a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800374c:	e02d      	b.n	80037aa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003752:	f107 0308 	add.w	r3, r7, #8
 8003756:	461a      	mov	r2, r3
 8003758:	2100      	movs	r1, #0
 800375a:	69b8      	ldr	r0, [r7, #24]
 800375c:	f001 f92e 	bl	80049bc <xQueueReceiveFromISR>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d003      	beq.n	800376e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003766:	f06f 0302 	mvn.w	r3, #2
 800376a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800376c:	e01d      	b.n	80037aa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <osSemaphoreAcquire+0xb6>
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <osSemaphoreAcquire+0xc8>)
 8003776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003784:	e011      	b.n	80037aa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	69b8      	ldr	r0, [r7, #24]
 800378a:	f001 f80f 	bl	80047ac <xQueueSemaphoreTake>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d00b      	beq.n	80037ac <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800379a:	f06f 0301 	mvn.w	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	e004      	b.n	80037ac <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80037a2:	f06f 0302 	mvn.w	r3, #2
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	e000      	b.n	80037ac <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80037aa:	bf00      	nop
      }
    }
  }

  return (stat);
 80037ac:	69fb      	ldr	r3, [r7, #28]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2000002c 	.word	0x2000002c
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80037d6:	f06f 0303 	mvn.w	r3, #3
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e03e      	b.n	800385c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037de:	f3ef 8305 	mrs	r3, IPSR
 80037e2:	617b      	str	r3, [r7, #20]
  return(result);
 80037e4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	613b      	str	r3, [r7, #16]
  return(result);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <osSemaphoreRelease+0x4a>
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <osSemaphoreRelease+0xa8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d120      	bne.n	8003840 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003802:	60fb      	str	r3, [r7, #12]
  return(result);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01a      	beq.n	8003840 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	4619      	mov	r1, r3
 8003814:	69b8      	ldr	r0, [r7, #24]
 8003816:	f000 fe63 	bl	80044e0 <xQueueGiveFromISR>
 800381a:	4603      	mov	r3, r0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d003      	beq.n	8003828 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003820:	f06f 0302 	mvn.w	r3, #2
 8003824:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003826:	e018      	b.n	800385a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d015      	beq.n	800385a <osSemaphoreRelease+0x9a>
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <osSemaphoreRelease+0xac>)
 8003830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800383e:	e00c      	b.n	800385a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003840:	2300      	movs	r3, #0
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	69b8      	ldr	r0, [r7, #24]
 8003848:	f000 fcbc 	bl	80041c4 <xQueueGenericSend>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d004      	beq.n	800385c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003852:	f06f 0302 	mvn.w	r3, #2
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e000      	b.n	800385c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800385a:	bf00      	nop
    }
  }

  return (stat);
 800385c:	69fb      	ldr	r3, [r7, #28]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000002c 	.word	0x2000002c
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	; 0x30
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003880:	f3ef 8305 	mrs	r3, IPSR
 8003884:	61bb      	str	r3, [r7, #24]
  return(result);
 8003886:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003888:	2b00      	cmp	r3, #0
 800388a:	d170      	bne.n	800396e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	617b      	str	r3, [r7, #20]
  return(result);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d16a      	bne.n	800396e <osMessageQueueNew+0xfe>
 8003898:	4b37      	ldr	r3, [pc, #220]	; (8003978 <osMessageQueueNew+0x108>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d105      	bne.n	80038ac <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038a0:	f3ef 8311 	mrs	r3, BASEPRI
 80038a4:	613b      	str	r3, [r7, #16]
  return(result);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d160      	bne.n	800396e <osMessageQueueNew+0xfe>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d05d      	beq.n	800396e <osMessageQueueNew+0xfe>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05a      	beq.n	800396e <osMessageQueueNew+0xfe>
    mem = -1;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d029      	beq.n	8003918 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d012      	beq.n	80038f2 <osMessageQueueNew+0x82>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b4f      	cmp	r3, #79	; 0x4f
 80038d2:	d90e      	bls.n	80038f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <osMessageQueueNew+0x82>
        mem = 1;
 80038ec:	2301      	movs	r3, #1
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	e014      	b.n	800391c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d110      	bne.n	800391c <osMessageQueueNew+0xac>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <osMessageQueueNew+0xac>
          mem = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	e001      	b.n	800391c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10c      	bne.n	800393c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6899      	ldr	r1, [r3, #8]
 800392a:	2300      	movs	r3, #0
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	460b      	mov	r3, r1
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa58 	bl	8003de8 <xQueueGenericCreateStatic>
 8003938:	6278      	str	r0, [r7, #36]	; 0x24
 800393a:	e008      	b.n	800394e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003942:	2200      	movs	r2, #0
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fac0 	bl	8003ecc <xQueueGenericCreate>
 800394c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <osMessageQueueNew+0xf2>
        name = attr->name;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	e001      	b.n	8003966 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003966:	69f9      	ldr	r1, [r7, #28]
 8003968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800396a:	f001 f9ef 	bl	8004d4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003970:	4618      	mov	r0, r3
 8003972:	3728      	adds	r7, #40	; 0x28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	2000002c 	.word	0x2000002c

0800397c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003994:	f3ef 8305 	mrs	r3, IPSR
 8003998:	61fb      	str	r3, [r7, #28]
  return(result);
 800399a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a0:	f3ef 8310 	mrs	r3, PRIMASK
 80039a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <osMessageQueuePut+0x44>
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <osMessageQueuePut+0xe0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d12e      	bne.n	8003a12 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039b4:	f3ef 8311 	mrs	r3, BASEPRI
 80039b8:	617b      	str	r3, [r7, #20]
  return(result);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d028      	beq.n	8003a12 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <osMessageQueuePut+0x56>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <osMessageQueuePut+0x56>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80039d2:	f06f 0303 	mvn.w	r3, #3
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039d8:	e039      	b.n	8003a4e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80039de:	f107 0210 	add.w	r2, r7, #16
 80039e2:	2300      	movs	r3, #0
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	6a38      	ldr	r0, [r7, #32]
 80039e8:	f000 fce6 	bl	80043b8 <xQueueGenericSendFromISR>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d003      	beq.n	80039fa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80039f2:	f06f 0302 	mvn.w	r3, #2
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039f8:	e029      	b.n	8003a4e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d026      	beq.n	8003a4e <osMessageQueuePut+0xd2>
 8003a00:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <osMessageQueuePut+0xe4>)
 8003a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a10:	e01d      	b.n	8003a4e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <osMessageQueuePut+0xa2>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003a1e:	f06f 0303 	mvn.w	r3, #3
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
 8003a24:	e014      	b.n	8003a50 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003a26:	2300      	movs	r3, #0
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	6a38      	ldr	r0, [r7, #32]
 8003a2e:	f000 fbc9 	bl	80041c4 <xQueueGenericSend>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d00b      	beq.n	8003a50 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003a3e:	f06f 0301 	mvn.w	r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
 8003a44:	e004      	b.n	8003a50 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003a46:	f06f 0302 	mvn.w	r3, #2
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4c:	e000      	b.n	8003a50 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	2000002c 	.word	0x2000002c
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a7a:	f3ef 8305 	mrs	r3, IPSR
 8003a7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a80:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <osMessageQueueGet+0x42>
 8003a92:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <osMessageQueueGet+0xdc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d12e      	bne.n	8003af8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a9e:	617b      	str	r3, [r7, #20]
  return(result);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d028      	beq.n	8003af8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <osMessageQueueGet+0x54>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <osMessageQueueGet+0x54>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003ab8:	f06f 0303 	mvn.w	r3, #3
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003abe:	e038      	b.n	8003b32 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	6a38      	ldr	r0, [r7, #32]
 8003ace:	f000 ff75 	bl	80049bc <xQueueReceiveFromISR>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d003      	beq.n	8003ae0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003ad8:	f06f 0302 	mvn.w	r3, #2
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003ade:	e028      	b.n	8003b32 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d025      	beq.n	8003b32 <osMessageQueueGet+0xce>
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <osMessageQueueGet+0xe0>)
 8003ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003af6:	e01c      	b.n	8003b32 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <osMessageQueueGet+0xa0>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003b04:	f06f 0303 	mvn.w	r3, #3
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	e013      	b.n	8003b34 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	6a38      	ldr	r0, [r7, #32]
 8003b12:	f000 fd6f 	bl	80045f4 <xQueueReceive>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d00b      	beq.n	8003b34 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003b22:	f06f 0301 	mvn.w	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	e004      	b.n	8003b34 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003b2a:	f06f 0302 	mvn.w	r3, #2
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	e000      	b.n	8003b34 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b32:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	2000002c 	.word	0x2000002c
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4a06      	ldr	r2, [pc, #24]	; (8003b78 <vApplicationGetIdleTaskMemory+0x30>)
 8003b5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000030 	.word	0x20000030
 8003b78:	2000008c 	.word	0x2000008c

08003b7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4a06      	ldr	r2, [pc, #24]	; (8003bac <vApplicationGetTimerTaskMemory+0x30>)
 8003b92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b9a:	601a      	str	r2, [r3, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	2000028c 	.word	0x2000028c
 8003bac:	200002e8 	.word	0x200002e8

08003bb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f103 0208 	add.w	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f103 0208 	add.w	r2, r3, #8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f103 0208 	add.w	r2, r3, #8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	601a      	str	r2, [r3, #0]
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c68:	d103      	bne.n	8003c72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e00c      	b.n	8003c8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3308      	adds	r3, #8
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e002      	b.n	8003c80 <vListInsert+0x2e>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d2f6      	bcs.n	8003c7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6892      	ldr	r2, [r2, #8]
 8003cda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6852      	ldr	r2, [r2, #4]
 8003ce4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d103      	bne.n	8003cf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	1e5a      	subs	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	e7fe      	b.n	8003d3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003d40:	f002 fcbc 	bl	80066bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	68f9      	ldr	r1, [r7, #12]
 8003d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	441a      	add	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	3b01      	subs	r3, #1
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	22ff      	movs	r2, #255	; 0xff
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	22ff      	movs	r2, #255	; 0xff
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d114      	bne.n	8003dc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01a      	beq.n	8003dd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3310      	adds	r3, #16
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 fca6 	bl	80056f4 <xTaskRemoveFromEventList>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d012      	beq.n	8003dd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <xQueueGenericReset+0xcc>)
 8003db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	e009      	b.n	8003dd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3310      	adds	r3, #16
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fef3 	bl	8003bb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3324      	adds	r3, #36	; 0x24
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff feee 	bl	8003bb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dd4:	f002 fca0 	bl	8006718 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dd8:	2301      	movs	r3, #1
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08e      	sub	sp, #56	; 0x38
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <xQueueGenericCreateStatic+0x28>
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0e:	e7fe      	b.n	8003e0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <xQueueGenericCreateStatic+0x42>
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	e7fe      	b.n	8003e28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <xQueueGenericCreateStatic+0x4e>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <xQueueGenericCreateStatic+0x52>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueGenericCreateStatic+0x54>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <xQueueGenericCreateStatic+0x6c>
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	e7fe      	b.n	8003e52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <xQueueGenericCreateStatic+0x78>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <xQueueGenericCreateStatic+0x7c>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <xQueueGenericCreateStatic+0x7e>
 8003e64:	2300      	movs	r3, #0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <xQueueGenericCreateStatic+0x96>
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	e7fe      	b.n	8003e7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e7e:	2350      	movs	r3, #80	; 0x50
 8003e80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d009      	beq.n	8003e9c <xQueueGenericCreateStatic+0xb4>
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	e7fe      	b.n	8003e9a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003eae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f842 	bl	8003f46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3730      	adds	r7, #48	; 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <xQueueGenericCreate+0x28>
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e7fe      	b.n	8003ef2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e004      	b.n	8003f0a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3350      	adds	r3, #80	; 0x50
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f002 fcee 	bl	80068f0 <pvPortMalloc>
 8003f14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00f      	beq.n	8003f3c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	3350      	adds	r3, #80	; 0x50
 8003f20:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f2a:	79fa      	ldrb	r2, [r7, #7]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f805 	bl	8003f46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
	}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d103      	bne.n	8003f62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e002      	b.n	8003f68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f74:	2101      	movs	r1, #1
 8003f76:	69b8      	ldr	r0, [r7, #24]
 8003f78:	f7ff fece 	bl	8003d18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00e      	beq.n	8003fb8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003fac:	2300      	movs	r3, #0
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f906 	bl	80041c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	6978      	ldr	r0, [r7, #20]
 8003fda:	f7ff ff77 	bl	8003ecc <xQueueGenericCreate>
 8003fde:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f7ff ffd3 	bl	8003f8c <prvInitialiseMutex>

		return pxNewQueue;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
	}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	6039      	str	r1, [r7, #0]
 8003ffa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	6939      	ldr	r1, [r7, #16]
 800400e:	6978      	ldr	r0, [r7, #20]
 8004010:	f7ff feea 	bl	8003de8 <xQueueGenericCreateStatic>
 8004014:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7ff ffb8 	bl	8003f8c <prvInitialiseMutex>

		return pxNewQueue;
 800401c:	68fb      	ldr	r3, [r7, #12]
	}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004026:	b590      	push	{r4, r7, lr}
 8004028:	b087      	sub	sp, #28
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d109      	bne.n	800404c <xQueueGiveMutexRecursive+0x26>
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e7fe      	b.n	800404a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	685c      	ldr	r4, [r3, #4]
 8004050:	f001 fd0c 	bl	8005a6c <xTaskGetCurrentTaskHandle>
 8004054:	4603      	mov	r3, r0
 8004056:	429c      	cmp	r4, r3
 8004058:	d111      	bne.n	800407e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	1e5a      	subs	r2, r3, #1
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800406c:	2300      	movs	r3, #0
 800406e:	2200      	movs	r2, #0
 8004070:	2100      	movs	r1, #0
 8004072:	6938      	ldr	r0, [r7, #16]
 8004074:	f000 f8a6 	bl	80041c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004078:	2301      	movs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e001      	b.n	8004082 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004082:	697b      	ldr	r3, [r7, #20]
	}
 8004084:	4618      	mov	r0, r3
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}

0800408c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xQueueTakeMutexRecursive+0x28>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e7fe      	b.n	80040b2 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	685c      	ldr	r4, [r3, #4]
 80040b8:	f001 fcd8 	bl	8005a6c <xTaskGetCurrentTaskHandle>
 80040bc:	4603      	mov	r3, r0
 80040be:	429c      	cmp	r4, r3
 80040c0:	d107      	bne.n	80040d2 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e00c      	b.n	80040ec <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	6938      	ldr	r0, [r7, #16]
 80040d6:	f000 fb69 	bl	80047ac <xQueueSemaphoreTake>
 80040da:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80040ec:	697b      	ldr	r3, [r7, #20]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}

080040f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b08a      	sub	sp, #40	; 0x28
 80040fa:	af02      	add	r7, sp, #8
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <xQueueCreateCountingSemaphoreStatic+0x26>
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e7fe      	b.n	800411a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	429a      	cmp	r2, r3
 8004122:	d909      	bls.n	8004138 <xQueueCreateCountingSemaphoreStatic+0x42>
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e7fe      	b.n	8004136 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004138:	2302      	movs	r3, #2
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff fe50 	bl	8003de8 <xQueueGenericCreateStatic>
 8004148:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004156:	69fb      	ldr	r3, [r7, #28]
	}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <xQueueCreateCountingSemaphore+0x24>
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e7fe      	b.n	8004182 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d909      	bls.n	80041a0 <xQueueCreateCountingSemaphore+0x40>
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e7fe      	b.n	800419e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80041a0:	2202      	movs	r2, #2
 80041a2:	2100      	movs	r1, #0
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fe91 	bl	8003ecc <xQueueGenericCreate>
 80041aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80041b8:	697b      	ldr	r3, [r7, #20]
	}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	; 0x38
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041d2:	2300      	movs	r3, #0
 80041d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <xQueueGenericSend+0x30>
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f2:	e7fe      	b.n	80041f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <xQueueGenericSend+0x3e>
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <xQueueGenericSend+0x42>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <xQueueGenericSend+0x44>
 8004206:	2300      	movs	r3, #0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <xQueueGenericSend+0x5c>
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
 800421e:	e7fe      	b.n	800421e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d103      	bne.n	800422e <xQueueGenericSend+0x6a>
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <xQueueGenericSend+0x6e>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <xQueueGenericSend+0x70>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <xQueueGenericSend+0x88>
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	623b      	str	r3, [r7, #32]
 800424a:	e7fe      	b.n	800424a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800424c:	f001 fc1e 	bl	8005a8c <xTaskGetSchedulerState>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <xQueueGenericSend+0x98>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <xQueueGenericSend+0x9c>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <xQueueGenericSend+0x9e>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <xQueueGenericSend+0xb6>
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	e7fe      	b.n	8004278 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800427a:	f002 fa1f 	bl	80066bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <xQueueGenericSend+0xcc>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d129      	bne.n	80042e4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004296:	f000 fc48 	bl	8004b2a <prvCopyDataToQueue>
 800429a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	3324      	adds	r3, #36	; 0x24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 fa23 	bl	80056f4 <xTaskRemoveFromEventList>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042b4:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <xQueueGenericSend+0x1f0>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	e00a      	b.n	80042dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <xQueueGenericSend+0x1f0>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042dc:	f002 fa1c 	bl	8006718 <vPortExitCritical>
				return pdPASS;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e063      	b.n	80043ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042ea:	f002 fa15 	bl	8006718 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e05c      	b.n	80043ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d106      	bne.n	8004306 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 fa5b 	bl	80057b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004306:	f002 fa07 	bl	8006718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800430a:	f000 ffd1 	bl	80052b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800430e:	f002 f9d5 	bl	80066bc <vPortEnterCritical>
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004318:	b25b      	sxtb	r3, r3
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431e:	d103      	bne.n	8004328 <xQueueGenericSend+0x164>
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800432e:	b25b      	sxtb	r3, r3
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004334:	d103      	bne.n	800433e <xQueueGenericSend+0x17a>
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800433e:	f002 f9eb 	bl	8006718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004342:	1d3a      	adds	r2, r7, #4
 8004344:	f107 0314 	add.w	r3, r7, #20
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f001 fa4a 	bl	80057e4 <xTaskCheckForTimeOut>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d124      	bne.n	80043a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004358:	f000 fcdf 	bl	8004d1a <prvIsQueueFull>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d018      	beq.n	8004394 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	3310      	adds	r3, #16
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f001 f974 	bl	8005658 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004372:	f000 fc6a 	bl	8004c4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004376:	f000 ffa9 	bl	80052cc <xTaskResumeAll>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f af7c 	bne.w	800427a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <xQueueGenericSend+0x1f0>)
 8004384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	e772      	b.n	800427a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004396:	f000 fc58 	bl	8004c4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800439a:	f000 ff97 	bl	80052cc <xTaskResumeAll>
 800439e:	e76c      	b.n	800427a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a2:	f000 fc52 	bl	8004c4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043a6:	f000 ff91 	bl	80052cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043aa:	2300      	movs	r3, #0
		}
	}
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3738      	adds	r7, #56	; 0x38
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	e000ed04 	.word	0xe000ed04

080043b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	; 0x38
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <xQueueGenericSendFromISR+0x2c>
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e7fe      	b.n	80043e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <xQueueGenericSendFromISR+0x3a>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericSendFromISR+0x3e>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueGenericSendFromISR+0x40>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <xQueueGenericSendFromISR+0x58>
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	e7fe      	b.n	800440e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d103      	bne.n	800441e <xQueueGenericSendFromISR+0x66>
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <xQueueGenericSendFromISR+0x6a>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <xQueueGenericSendFromISR+0x6c>
 8004422:	2300      	movs	r3, #0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <xQueueGenericSendFromISR+0x84>
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e7fe      	b.n	800443a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800443c:	f002 fa1a 	bl	8006874 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004440:	f3ef 8211 	mrs	r2, BASEPRI
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	61ba      	str	r2, [r7, #24]
 8004456:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004458:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	429a      	cmp	r2, r3
 8004466:	d302      	bcc.n	800446e <xQueueGenericSendFromISR+0xb6>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d12c      	bne.n	80044c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800447e:	f000 fb54 	bl	8004b2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004482:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448a:	d112      	bne.n	80044b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f92b 	bl	80056f4 <xTaskRemoveFromEventList>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e007      	b.n	80044c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044b6:	3301      	adds	r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	b25a      	sxtb	r2, r3
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044c2:	2301      	movs	r3, #1
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80044c6:	e001      	b.n	80044cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3738      	adds	r7, #56	; 0x38
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	; 0x38
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <xQueueGiveFromISR+0x28>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	623b      	str	r3, [r7, #32]
 8004506:	e7fe      	b.n	8004506 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <xQueueGiveFromISR+0x44>
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	e7fe      	b.n	8004522 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <xQueueGiveFromISR+0x54>
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <xQueueGiveFromISR+0x58>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <xQueueGiveFromISR+0x5a>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <xQueueGiveFromISR+0x72>
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e7fe      	b.n	8004550 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004552:	f002 f98f 	bl	8006874 <vPortValidateInterruptPriority>
	__asm volatile
 8004556:	f3ef 8211 	mrs	r2, BASEPRI
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	617a      	str	r2, [r7, #20]
 800456c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800456e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457e:	429a      	cmp	r2, r3
 8004580:	d22b      	bcs.n	80045da <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800459c:	d112      	bne.n	80045c4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	3324      	adds	r3, #36	; 0x24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 f8a2 	bl	80056f4 <xTaskRemoveFromEventList>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e007      	b.n	80045d4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045c8:	3301      	adds	r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	b25a      	sxtb	r2, r3
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045d4:	2301      	movs	r3, #1
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
 80045d8:	e001      	b.n	80045de <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	637b      	str	r3, [r7, #52]	; 0x34
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3738      	adds	r7, #56	; 0x38
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	; 0x30
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <xQueueReceive+0x2e>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	623b      	str	r3, [r7, #32]
 8004620:	e7fe      	b.n	8004620 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <xQueueReceive+0x3c>
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <xQueueReceive+0x40>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <xQueueReceive+0x42>
 8004634:	2300      	movs	r3, #0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <xQueueReceive+0x5a>
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	e7fe      	b.n	800464c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800464e:	f001 fa1d 	bl	8005a8c <xTaskGetSchedulerState>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <xQueueReceive+0x6a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <xQueueReceive+0x6e>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <xQueueReceive+0x70>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <xQueueReceive+0x88>
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	e7fe      	b.n	800467a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800467c:	f002 f81e 	bl	80066bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01f      	beq.n	80046cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004690:	f000 fab5 	bl	8004bfe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	1e5a      	subs	r2, r3, #1
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00f      	beq.n	80046c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	3310      	adds	r3, #16
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f823 	bl	80056f4 <xTaskRemoveFromEventList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046b4:	4b3c      	ldr	r3, [pc, #240]	; (80047a8 <xQueueReceive+0x1b4>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046c4:	f002 f828 	bl	8006718 <vPortExitCritical>
				return pdPASS;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e069      	b.n	80047a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046d2:	f002 f821 	bl	8006718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e062      	b.n	80047a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046e0:	f107 0310 	add.w	r3, r7, #16
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 f867 	bl	80057b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046ea:	2301      	movs	r3, #1
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ee:	f002 f813 	bl	8006718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046f2:	f000 fddd 	bl	80052b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046f6:	f001 ffe1 	bl	80066bc <vPortEnterCritical>
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004700:	b25b      	sxtb	r3, r3
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004706:	d103      	bne.n	8004710 <xQueueReceive+0x11c>
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004716:	b25b      	sxtb	r3, r3
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800471c:	d103      	bne.n	8004726 <xQueueReceive+0x132>
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004726:	f001 fff7 	bl	8006718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800472a:	1d3a      	adds	r2, r7, #4
 800472c:	f107 0310 	add.w	r3, r7, #16
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f001 f856 	bl	80057e4 <xTaskCheckForTimeOut>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d123      	bne.n	8004786 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800473e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004740:	f000 fad5 	bl	8004cee <prvIsQueueEmpty>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d017      	beq.n	800477a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	3324      	adds	r3, #36	; 0x24
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f000 ff80 	bl	8005658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800475a:	f000 fa76 	bl	8004c4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800475e:	f000 fdb5 	bl	80052cc <xTaskResumeAll>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d189      	bne.n	800467c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004768:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <xQueueReceive+0x1b4>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	e780      	b.n	800467c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800477a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477c:	f000 fa65 	bl	8004c4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004780:	f000 fda4 	bl	80052cc <xTaskResumeAll>
 8004784:	e77a      	b.n	800467c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004788:	f000 fa5f 	bl	8004c4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800478c:	f000 fd9e 	bl	80052cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004792:	f000 faac 	bl	8004cee <prvIsQueueEmpty>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	f43f af6f 	beq.w	800467c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800479e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3730      	adds	r7, #48	; 0x30
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08e      	sub	sp, #56	; 0x38
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047be:	2300      	movs	r3, #0
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <xQueueSemaphoreTake+0x30>
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	623b      	str	r3, [r7, #32]
 80047da:	e7fe      	b.n	80047da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <xQueueSemaphoreTake+0x4c>
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	61fb      	str	r3, [r7, #28]
 80047f6:	e7fe      	b.n	80047f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047f8:	f001 f948 	bl	8005a8c <xTaskGetSchedulerState>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <xQueueSemaphoreTake+0x5c>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <xQueueSemaphoreTake+0x60>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <xQueueSemaphoreTake+0x62>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <xQueueSemaphoreTake+0x7a>
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e7fe      	b.n	8004824 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004826:	f001 ff49 	bl	80066bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d024      	beq.n	8004880 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	1e5a      	subs	r2, r3, #1
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004846:	f001 fa9d 	bl	8005d84 <pvTaskIncrementMutexHeldCount>
 800484a:	4602      	mov	r2, r0
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00f      	beq.n	8004878 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	3310      	adds	r3, #16
 800485c:	4618      	mov	r0, r3
 800485e:	f000 ff49 	bl	80056f4 <xTaskRemoveFromEventList>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004868:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <xQueueSemaphoreTake+0x20c>)
 800486a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004878:	f001 ff4e 	bl	8006718 <vPortExitCritical>
				return pdPASS;
 800487c:	2301      	movs	r3, #1
 800487e:	e096      	b.n	80049ae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d110      	bne.n	80048a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <xQueueSemaphoreTake+0xf4>
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	e7fe      	b.n	800489e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80048a0:	f001 ff3a 	bl	8006718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e082      	b.n	80049ae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048ae:	f107 030c 	add.w	r3, r7, #12
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ff80 	bl	80057b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048bc:	f001 ff2c 	bl	8006718 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048c0:	f000 fcf6 	bl	80052b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048c4:	f001 fefa 	bl	80066bc <vPortEnterCritical>
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d4:	d103      	bne.n	80048de <xQueueSemaphoreTake+0x132>
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ea:	d103      	bne.n	80048f4 <xQueueSemaphoreTake+0x148>
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f4:	f001 ff10 	bl	8006718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048f8:	463a      	mov	r2, r7
 80048fa:	f107 030c 	add.w	r3, r7, #12
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f000 ff6f 	bl	80057e4 <xTaskCheckForTimeOut>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d132      	bne.n	8004972 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800490c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800490e:	f000 f9ee 	bl	8004cee <prvIsQueueEmpty>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d026      	beq.n	8004966 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004920:	f001 fecc 	bl	80066bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4618      	mov	r0, r3
 800492a:	f001 f8cd 	bl	8005ac8 <xTaskPriorityInherit>
 800492e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004930:	f001 fef2 	bl	8006718 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	3324      	adds	r3, #36	; 0x24
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fe8b 	bl	8005658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004944:	f000 f981 	bl	8004c4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004948:	f000 fcc0 	bl	80052cc <xTaskResumeAll>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	f47f af69 	bne.w	8004826 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <xQueueSemaphoreTake+0x20c>)
 8004956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	e75f      	b.n	8004826 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004968:	f000 f96f 	bl	8004c4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800496c:	f000 fcae 	bl	80052cc <xTaskResumeAll>
 8004970:	e759      	b.n	8004826 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004974:	f000 f969 	bl	8004c4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004978:	f000 fca8 	bl	80052cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800497c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800497e:	f000 f9b6 	bl	8004cee <prvIsQueueEmpty>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	f43f af4e 	beq.w	8004826 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004990:	f001 fe94 	bl	80066bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004996:	f000 f8b0 	bl	8004afa <prvGetDisinheritPriorityAfterTimeout>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 f96a 	bl	8005c7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80049a8:	f001 feb6 	bl	8006718 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3738      	adds	r7, #56	; 0x38
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08e      	sub	sp, #56	; 0x38
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <xQueueReceiveFromISR+0x2a>
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	623b      	str	r3, [r7, #32]
 80049e4:	e7fe      	b.n	80049e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d103      	bne.n	80049f4 <xQueueReceiveFromISR+0x38>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <xQueueReceiveFromISR+0x3c>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <xQueueReceiveFromISR+0x3e>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <xQueueReceiveFromISR+0x56>
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e7fe      	b.n	8004a10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a12:	f001 ff2f 	bl	8006874 <vPortValidateInterruptPriority>
	__asm volatile
 8004a16:	f3ef 8211 	mrs	r2, BASEPRI
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	61ba      	str	r2, [r7, #24]
 8004a2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d02f      	beq.n	8004a9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a4c:	f000 f8d7 	bl	8004bfe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	1e5a      	subs	r2, r3, #1
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a60:	d112      	bne.n	8004a88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	3310      	adds	r3, #16
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fe40 	bl	80056f4 <xTaskRemoveFromEventList>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00e      	beq.n	8004a98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e007      	b.n	8004a98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	b25a      	sxtb	r2, r3
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9c:	e001      	b.n	8004aa2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3738      	adds	r7, #56	; 0x38
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <vQueueDelete+0x26>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	e7fe      	b.n	8004ada <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f95d 	bl	8004d9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f001 ffc1 	bl	8006a74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e001      	b.n	8004b1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
	}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10d      	bne.n	8004b64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d14d      	bne.n	8004bec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 f825 	bl	8005ba4 <xTaskPriorityDisinherit>
 8004b5a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e043      	b.n	8004bec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d119      	bne.n	8004b9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6898      	ldr	r0, [r3, #8]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	461a      	mov	r2, r3
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	f002 f8b5 	bl	8006ce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	441a      	add	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d32b      	bcc.n	8004bec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	e026      	b.n	8004bec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68d8      	ldr	r0, [r3, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	f002 f89b 	bl	8006ce4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	425b      	negs	r3, r3
 8004bb8:	441a      	add	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d207      	bcs.n	8004bda <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	425b      	negs	r3, r3
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d105      	bne.n	8004bec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bf4:	697b      	ldr	r3, [r7, #20]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d018      	beq.n	8004c42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d303      	bcc.n	8004c32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68d9      	ldr	r1, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6838      	ldr	r0, [r7, #0]
 8004c3e:	f002 f851 	bl	8006ce4 <memcpy>
	}
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c52:	f001 fd33 	bl	80066bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c5e:	e011      	b.n	8004c84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d012      	beq.n	8004c8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3324      	adds	r3, #36	; 0x24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fd41 	bl	80056f4 <xTaskRemoveFromEventList>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c78:	f000 fe14 	bl	80058a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dce9      	bgt.n	8004c60 <prvUnlockQueue+0x16>
 8004c8c:	e000      	b.n	8004c90 <prvUnlockQueue+0x46>
					break;
 8004c8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c98:	f001 fd3e 	bl	8006718 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c9c:	f001 fd0e 	bl	80066bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ca8:	e011      	b.n	8004cce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3310      	adds	r3, #16
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fd1c 	bl	80056f4 <xTaskRemoveFromEventList>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cc2:	f000 fdef 	bl	80058a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cc6:	7bbb      	ldrb	r3, [r7, #14]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	dce9      	bgt.n	8004caa <prvUnlockQueue+0x60>
 8004cd6:	e000      	b.n	8004cda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	22ff      	movs	r2, #255	; 0xff
 8004cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ce2:	f001 fd19 	bl	8006718 <vPortExitCritical>
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cf6:	f001 fce1 	bl	80066bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d02:	2301      	movs	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e001      	b.n	8004d0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d0c:	f001 fd04 	bl	8006718 <vPortExitCritical>

	return xReturn;
 8004d10:	68fb      	ldr	r3, [r7, #12]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d22:	f001 fccb 	bl	80066bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d102      	bne.n	8004d38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e001      	b.n	8004d3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d3c:	f001 fcec 	bl	8006718 <vPortExitCritical>

	return xReturn;
 8004d40:	68fb      	ldr	r3, [r7, #12]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e014      	b.n	8004d86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d5c:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <vQueueAddToRegistry+0x4c>)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10b      	bne.n	8004d80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d68:	490b      	ldr	r1, [pc, #44]	; (8004d98 <vQueueAddToRegistry+0x4c>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <vQueueAddToRegistry+0x4c>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d7e:	e005      	b.n	8004d8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b07      	cmp	r3, #7
 8004d8a:	d9e7      	bls.n	8004d5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	20001d34 	.word	0x20001d34

08004d9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e016      	b.n	8004dd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004daa:	4a10      	ldr	r2, [pc, #64]	; (8004dec <vQueueUnregisterQueue+0x50>)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d10b      	bne.n	8004dd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <vQueueUnregisterQueue+0x50>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004dc4:	4a09      	ldr	r2, [pc, #36]	; (8004dec <vQueueUnregisterQueue+0x50>)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	2200      	movs	r2, #0
 8004dce:	605a      	str	r2, [r3, #4]
				break;
 8004dd0:	e005      	b.n	8004dde <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d9e5      	bls.n	8004daa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20001d34 	.word	0x20001d34

08004df0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e00:	f001 fc5c 	bl	80066bc <vPortEnterCritical>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e10:	d103      	bne.n	8004e1a <vQueueWaitForMessageRestricted+0x2a>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e26:	d103      	bne.n	8004e30 <vQueueWaitForMessageRestricted+0x40>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e30:	f001 fc72 	bl	8006718 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d106      	bne.n	8004e4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3324      	adds	r3, #36	; 0x24
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fc2b 	bl	80056a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f7ff fefd 	bl	8004c4a <prvUnlockQueue>
	}
 8004e50:	bf00      	nop
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08e      	sub	sp, #56	; 0x38
 8004e5c:	af04      	add	r7, sp, #16
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <xTaskCreateStatic+0x28>
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	e7fe      	b.n	8004e7e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <xTaskCreateStatic+0x42>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	e7fe      	b.n	8004e98 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e9a:	235c      	movs	r3, #92	; 0x5c
 8004e9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ea2:	d009      	beq.n	8004eb8 <xTaskCreateStatic+0x60>
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e7fe      	b.n	8004eb6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01e      	beq.n	8004efc <xTaskCreateStatic+0xa4>
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9303      	str	r3, [sp, #12]
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	9302      	str	r3, [sp, #8]
 8004ede:	f107 0314 	add.w	r3, r7, #20
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f850 	bl	8004f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef6:	f000 f8d3 	bl	80050a0 <prvAddNewTaskToReadyList>
 8004efa:	e001      	b.n	8004f00 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f00:	697b      	ldr	r3, [r7, #20]
	}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3728      	adds	r7, #40	; 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b08c      	sub	sp, #48	; 0x30
 8004f0e:	af04      	add	r7, sp, #16
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 fce6 	bl	80068f0 <pvPortMalloc>
 8004f24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00e      	beq.n	8004f4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f2c:	205c      	movs	r0, #92	; 0x5c
 8004f2e:	f001 fcdf 	bl	80068f0 <pvPortMalloc>
 8004f32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f40:	e005      	b.n	8004f4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f42:	6978      	ldr	r0, [r7, #20]
 8004f44:	f001 fd96 	bl	8006a74 <vPortFree>
 8004f48:	e001      	b.n	8004f4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d017      	beq.n	8004f84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9303      	str	r3, [sp, #12]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	9302      	str	r3, [sp, #8]
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f80e 	bl	8004f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f78:	69f8      	ldr	r0, [r7, #28]
 8004f7a:	f000 f891 	bl	80050a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	e002      	b.n	8004f8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3720      	adds	r7, #32
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	461a      	mov	r2, r3
 8004fac:	21a5      	movs	r1, #165	; 0xa5
 8004fae:	f001 fea4 	bl	8006cfa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <prvInitialiseNewTask+0x56>
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e7fe      	b.n	8004fe8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e012      	b.n	8005016 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	7819      	ldrb	r1, [r3, #0]
 8004ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3334      	adds	r3, #52	; 0x34
 8005000:	460a      	mov	r2, r1
 8005002:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d006      	beq.n	800501e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3301      	adds	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2b0f      	cmp	r3, #15
 800501a:	d9e9      	bls.n	8004ff0 <prvInitialiseNewTask+0x5c>
 800501c:	e000      	b.n	8005020 <prvInitialiseNewTask+0x8c>
		{
			break;
 800501e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	2b37      	cmp	r3, #55	; 0x37
 800502c:	d901      	bls.n	8005032 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800502e:	2337      	movs	r3, #55	; 0x37
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2200      	movs	r2, #0
 8005042:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	3304      	adds	r3, #4
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe fdd1 	bl	8003bf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	3318      	adds	r3, #24
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fdcc 	bl	8003bf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2200      	movs	r2, #0
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	69b8      	ldr	r0, [r7, #24]
 8005082:	f001 f9f1 	bl	8006468 <pxPortInitialiseStack>
 8005086:	4602      	mov	r2, r0
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005096:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005098:	bf00      	nop
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050a8:	f001 fb08 	bl	80066bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050ac:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <prvAddNewTaskToReadyList+0xc4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <prvAddNewTaskToReadyList+0xc4>)
 80050b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050be:	4a2a      	ldr	r2, [pc, #168]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <prvAddNewTaskToReadyList+0xc4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d110      	bne.n	80050ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050cc:	f000 fc0e 	bl	80058ec <prvInitialiseTaskLists>
 80050d0:	e00d      	b.n	80050ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050d2:	4b26      	ldr	r3, [pc, #152]	; (800516c <prvAddNewTaskToReadyList+0xcc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d802      	bhi.n	80050ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050e8:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <prvAddNewTaskToReadyList+0xd0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <prvAddNewTaskToReadyList+0xd0>)
 80050f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050f8:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <prvAddNewTaskToReadyList+0xd0>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <prvAddNewTaskToReadyList+0xd4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d903      	bls.n	8005114 <prvAddNewTaskToReadyList+0x74>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <prvAddNewTaskToReadyList+0xd4>)
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4a15      	ldr	r2, [pc, #84]	; (8005178 <prvAddNewTaskToReadyList+0xd8>)
 8005122:	441a      	add	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f7fe fd6d 	bl	8003c0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005130:	f001 faf2 	bl	8006718 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005134:	4b0d      	ldr	r3, [pc, #52]	; (800516c <prvAddNewTaskToReadyList+0xcc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00e      	beq.n	800515a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800513c:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <prvAddNewTaskToReadyList+0xc8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	429a      	cmp	r2, r3
 8005148:	d207      	bcs.n	800515a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <prvAddNewTaskToReadyList+0xdc>)
 800514c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000bbc 	.word	0x20000bbc
 8005168:	200006e8 	.word	0x200006e8
 800516c:	20000bc8 	.word	0x20000bc8
 8005170:	20000bd8 	.word	0x20000bd8
 8005174:	20000bc4 	.word	0x20000bc4
 8005178:	200006ec 	.word	0x200006ec
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d016      	beq.n	80051c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <vTaskDelay+0x60>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <vTaskDelay+0x2e>
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	e7fe      	b.n	80051ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80051ae:	f000 f87f 	bl	80052b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051b2:	2100      	movs	r1, #0
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fdf9 	bl	8005dac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051ba:	f000 f887 	bl	80052cc <xTaskResumeAll>
 80051be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <vTaskDelay+0x64>)
 80051c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000be4 	.word	0x20000be4
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051f6:	463a      	mov	r2, r7
 80051f8:	1d39      	adds	r1, r7, #4
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe fca2 	bl	8003b48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	9202      	str	r2, [sp, #8]
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	2300      	movs	r3, #0
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	2300      	movs	r3, #0
 8005214:	460a      	mov	r2, r1
 8005216:	4920      	ldr	r1, [pc, #128]	; (8005298 <vTaskStartScheduler+0xb0>)
 8005218:	4820      	ldr	r0, [pc, #128]	; (800529c <vTaskStartScheduler+0xb4>)
 800521a:	f7ff fe1d 	bl	8004e58 <xTaskCreateStatic>
 800521e:	4602      	mov	r2, r0
 8005220:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <vTaskStartScheduler+0xb8>)
 8005222:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <vTaskStartScheduler+0xb8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800522c:	2301      	movs	r3, #1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e001      	b.n	8005236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d102      	bne.n	8005242 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800523c:	f000 fe0a 	bl	8005e54 <xTimerCreateTimerTask>
 8005240:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d115      	bne.n	8005274 <vTaskStartScheduler+0x8c>
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800525a:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <vTaskStartScheduler+0xbc>)
 800525c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005260:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <vTaskStartScheduler+0xc0>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005268:	4b10      	ldr	r3, [pc, #64]	; (80052ac <vTaskStartScheduler+0xc4>)
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800526e:	f001 f987 	bl	8006580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005272:	e00d      	b.n	8005290 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527a:	d109      	bne.n	8005290 <vTaskStartScheduler+0xa8>
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e7fe      	b.n	800528e <vTaskStartScheduler+0xa6>
}
 8005290:	bf00      	nop
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	08006d5c 	.word	0x08006d5c
 800529c:	080058bd 	.word	0x080058bd
 80052a0:	20000be0 	.word	0x20000be0
 80052a4:	20000bdc 	.word	0x20000bdc
 80052a8:	20000bc8 	.word	0x20000bc8
 80052ac:	20000bc0 	.word	0x20000bc0

080052b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <vTaskSuspendAll+0x18>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	4a03      	ldr	r2, [pc, #12]	; (80052c8 <vTaskSuspendAll+0x18>)
 80052bc:	6013      	str	r3, [r2, #0]
}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000be4 	.word	0x20000be4

080052cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052da:	4b41      	ldr	r3, [pc, #260]	; (80053e0 <xTaskResumeAll+0x114>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <xTaskResumeAll+0x2a>
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	e7fe      	b.n	80052f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052f6:	f001 f9e1 	bl	80066bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <xTaskResumeAll+0x114>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3b01      	subs	r3, #1
 8005300:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <xTaskResumeAll+0x114>)
 8005302:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005304:	4b36      	ldr	r3, [pc, #216]	; (80053e0 <xTaskResumeAll+0x114>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d162      	bne.n	80053d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800530c:	4b35      	ldr	r3, [pc, #212]	; (80053e4 <xTaskResumeAll+0x118>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d05e      	beq.n	80053d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005314:	e02f      	b.n	8005376 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005316:	4b34      	ldr	r3, [pc, #208]	; (80053e8 <xTaskResumeAll+0x11c>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3318      	adds	r3, #24
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe fcce 	bl	8003cc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3304      	adds	r3, #4
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe fcc9 	bl	8003cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005336:	4b2d      	ldr	r3, [pc, #180]	; (80053ec <xTaskResumeAll+0x120>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d903      	bls.n	8005346 <xTaskResumeAll+0x7a>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <xTaskResumeAll+0x120>)
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <xTaskResumeAll+0x124>)
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3304      	adds	r3, #4
 800535a:	4619      	mov	r1, r3
 800535c:	4610      	mov	r0, r2
 800535e:	f7fe fc54 	bl	8003c0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <xTaskResumeAll+0x128>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	429a      	cmp	r2, r3
 800536e:	d302      	bcc.n	8005376 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005370:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <xTaskResumeAll+0x12c>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <xTaskResumeAll+0x11c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1cb      	bne.n	8005316 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005384:	f000 fb4c 	bl	8005a20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005388:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <xTaskResumeAll+0x130>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005394:	f000 f846 	bl	8005424 <xTaskIncrementTick>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800539e:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <xTaskResumeAll+0x12c>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f1      	bne.n	8005394 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80053b0:	4b12      	ldr	r3, [pc, #72]	; (80053fc <xTaskResumeAll+0x130>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <xTaskResumeAll+0x12c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053be:	2301      	movs	r3, #1
 80053c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <xTaskResumeAll+0x134>)
 80053c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053d2:	f001 f9a1 	bl	8006718 <vPortExitCritical>

	return xAlreadyYielded;
 80053d6:	68bb      	ldr	r3, [r7, #8]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000be4 	.word	0x20000be4
 80053e4:	20000bbc 	.word	0x20000bbc
 80053e8:	20000b7c 	.word	0x20000b7c
 80053ec:	20000bc4 	.word	0x20000bc4
 80053f0:	200006ec 	.word	0x200006ec
 80053f4:	200006e8 	.word	0x200006e8
 80053f8:	20000bd0 	.word	0x20000bd0
 80053fc:	20000bcc 	.word	0x20000bcc
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <xTaskGetTickCount+0x1c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005410:	687b      	ldr	r3, [r7, #4]
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20000bc0 	.word	0x20000bc0

08005424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542e:	4b51      	ldr	r3, [pc, #324]	; (8005574 <xTaskIncrementTick+0x150>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 808d 	bne.w	8005552 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005438:	4b4f      	ldr	r3, [pc, #316]	; (8005578 <xTaskIncrementTick+0x154>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005440:	4a4d      	ldr	r2, [pc, #308]	; (8005578 <xTaskIncrementTick+0x154>)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d11f      	bne.n	800548c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800544c:	4b4b      	ldr	r3, [pc, #300]	; (800557c <xTaskIncrementTick+0x158>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <xTaskIncrementTick+0x46>
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	e7fe      	b.n	8005468 <xTaskIncrementTick+0x44>
 800546a:	4b44      	ldr	r3, [pc, #272]	; (800557c <xTaskIncrementTick+0x158>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	4b43      	ldr	r3, [pc, #268]	; (8005580 <xTaskIncrementTick+0x15c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a41      	ldr	r2, [pc, #260]	; (800557c <xTaskIncrementTick+0x158>)
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4a41      	ldr	r2, [pc, #260]	; (8005580 <xTaskIncrementTick+0x15c>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4b41      	ldr	r3, [pc, #260]	; (8005584 <xTaskIncrementTick+0x160>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	4a3f      	ldr	r2, [pc, #252]	; (8005584 <xTaskIncrementTick+0x160>)
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	f000 faca 	bl	8005a20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800548c:	4b3e      	ldr	r3, [pc, #248]	; (8005588 <xTaskIncrementTick+0x164>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	d34e      	bcc.n	8005534 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005496:	4b39      	ldr	r3, [pc, #228]	; (800557c <xTaskIncrementTick+0x158>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <xTaskIncrementTick+0x80>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <xTaskIncrementTick+0x82>
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d004      	beq.n	80054b4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	4b37      	ldr	r3, [pc, #220]	; (8005588 <xTaskIncrementTick+0x164>)
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054b0:	601a      	str	r2, [r3, #0]
					break;
 80054b2:	e03f      	b.n	8005534 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054b4:	4b31      	ldr	r3, [pc, #196]	; (800557c <xTaskIncrementTick+0x158>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d203      	bcs.n	80054d4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054cc:	4a2e      	ldr	r2, [pc, #184]	; (8005588 <xTaskIncrementTick+0x164>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
						break;
 80054d2:	e02f      	b.n	8005534 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fe fbf3 	bl	8003cc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3318      	adds	r3, #24
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fbea 	bl	8003cc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <xTaskIncrementTick+0x168>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d903      	bls.n	8005504 <xTaskIncrementTick+0xe0>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4a22      	ldr	r2, [pc, #136]	; (800558c <xTaskIncrementTick+0x168>)
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <xTaskIncrementTick+0x16c>)
 8005512:	441a      	add	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f7fe fb75 	bl	8003c0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <xTaskIncrementTick+0x170>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d3b3      	bcc.n	8005496 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800552e:	2301      	movs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005532:	e7b0      	b.n	8005496 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005534:	4b17      	ldr	r3, [pc, #92]	; (8005594 <xTaskIncrementTick+0x170>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	4915      	ldr	r1, [pc, #84]	; (8005590 <xTaskIncrementTick+0x16c>)
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d907      	bls.n	800555c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e004      	b.n	800555c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005552:	4b11      	ldr	r3, [pc, #68]	; (8005598 <xTaskIncrementTick+0x174>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	4a0f      	ldr	r2, [pc, #60]	; (8005598 <xTaskIncrementTick+0x174>)
 800555a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800555c:	4b0f      	ldr	r3, [pc, #60]	; (800559c <xTaskIncrementTick+0x178>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005568:	697b      	ldr	r3, [r7, #20]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000be4 	.word	0x20000be4
 8005578:	20000bc0 	.word	0x20000bc0
 800557c:	20000b74 	.word	0x20000b74
 8005580:	20000b78 	.word	0x20000b78
 8005584:	20000bd4 	.word	0x20000bd4
 8005588:	20000bdc 	.word	0x20000bdc
 800558c:	20000bc4 	.word	0x20000bc4
 8005590:	200006ec 	.word	0x200006ec
 8005594:	200006e8 	.word	0x200006e8
 8005598:	20000bcc 	.word	0x20000bcc
 800559c:	20000bd0 	.word	0x20000bd0

080055a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055a6:	4b27      	ldr	r3, [pc, #156]	; (8005644 <vTaskSwitchContext+0xa4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055ae:	4b26      	ldr	r3, [pc, #152]	; (8005648 <vTaskSwitchContext+0xa8>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055b4:	e040      	b.n	8005638 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80055b6:	4b24      	ldr	r3, [pc, #144]	; (8005648 <vTaskSwitchContext+0xa8>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80055bc:	4b23      	ldr	r3, [pc, #140]	; (800564c <vTaskSwitchContext+0xac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e00f      	b.n	80055e4 <vTaskSwitchContext+0x44>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <vTaskSwitchContext+0x3e>
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	607b      	str	r3, [r7, #4]
 80055dc:	e7fe      	b.n	80055dc <vTaskSwitchContext+0x3c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	491a      	ldr	r1, [pc, #104]	; (8005650 <vTaskSwitchContext+0xb0>)
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0e5      	beq.n	80055c4 <vTaskSwitchContext+0x24>
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <vTaskSwitchContext+0xb0>)
 8005604:	4413      	add	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	3308      	adds	r3, #8
 800561a:	429a      	cmp	r2, r3
 800561c:	d104      	bne.n	8005628 <vTaskSwitchContext+0x88>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <vTaskSwitchContext+0xb4>)
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4a06      	ldr	r2, [pc, #24]	; (800564c <vTaskSwitchContext+0xac>)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6013      	str	r3, [r2, #0]
}
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	20000be4 	.word	0x20000be4
 8005648:	20000bd0 	.word	0x20000bd0
 800564c:	20000bc4 	.word	0x20000bc4
 8005650:	200006ec 	.word	0x200006ec
 8005654:	200006e8 	.word	0x200006e8

08005658 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <vTaskPlaceOnEventList+0x24>
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e7fe      	b.n	800567a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800567c:	4b07      	ldr	r3, [pc, #28]	; (800569c <vTaskPlaceOnEventList+0x44>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3318      	adds	r3, #24
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fe fae4 	bl	8003c52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800568a:	2101      	movs	r1, #1
 800568c:	6838      	ldr	r0, [r7, #0]
 800568e:	f000 fb8d 	bl	8005dac <prvAddCurrentTaskToDelayedList>
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200006e8 	.word	0x200006e8

080056a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <vTaskPlaceOnEventListRestricted+0x26>
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e7fe      	b.n	80056c4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <vTaskPlaceOnEventListRestricted+0x50>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3318      	adds	r3, #24
 80056cc:	4619      	mov	r1, r3
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7fe fa9b 	bl	8003c0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80056da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	68b8      	ldr	r0, [r7, #8]
 80056e4:	f000 fb62 	bl	8005dac <prvAddCurrentTaskToDelayedList>
	}
 80056e8:	bf00      	nop
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	200006e8 	.word	0x200006e8

080056f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <xTaskRemoveFromEventList+0x2a>
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e7fe      	b.n	800571c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3318      	adds	r3, #24
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe face 	bl	8003cc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005728:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <xTaskRemoveFromEventList+0xac>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d11d      	bne.n	800576c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	3304      	adds	r3, #4
 8005734:	4618      	mov	r0, r3
 8005736:	f7fe fac5 	bl	8003cc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573e:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <xTaskRemoveFromEventList+0xb0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d903      	bls.n	800574e <xTaskRemoveFromEventList+0x5a>
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <xTaskRemoveFromEventList+0xb0>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <xTaskRemoveFromEventList+0xb4>)
 800575c:	441a      	add	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7fe fa50 	bl	8003c0a <vListInsertEnd>
 800576a:	e005      	b.n	8005778 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	3318      	adds	r3, #24
 8005770:	4619      	mov	r1, r3
 8005772:	480e      	ldr	r0, [pc, #56]	; (80057ac <xTaskRemoveFromEventList+0xb8>)
 8005774:	f7fe fa49 	bl	8003c0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <xTaskRemoveFromEventList+0xbc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	429a      	cmp	r2, r3
 8005784:	d905      	bls.n	8005792 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800578a:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <xTaskRemoveFromEventList+0xc0>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	e001      	b.n	8005796 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005796:	697b      	ldr	r3, [r7, #20]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000be4 	.word	0x20000be4
 80057a4:	20000bc4 	.word	0x20000bc4
 80057a8:	200006ec 	.word	0x200006ec
 80057ac:	20000b7c 	.word	0x20000b7c
 80057b0:	200006e8 	.word	0x200006e8
 80057b4:	20000bd0 	.word	0x20000bd0

080057b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <vTaskInternalSetTimeOutState+0x24>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <vTaskInternalSetTimeOutState+0x28>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000bd4 	.word	0x20000bd4
 80057e0:	20000bc0 	.word	0x20000bc0

080057e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <xTaskCheckForTimeOut+0x24>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e7fe      	b.n	8005806 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <xTaskCheckForTimeOut+0x3e>
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	e7fe      	b.n	8005820 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005822:	f000 ff4b 	bl	80066bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005826:	4b1d      	ldr	r3, [pc, #116]	; (800589c <xTaskCheckForTimeOut+0xb8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583e:	d102      	bne.n	8005846 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e023      	b.n	800588e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <xTaskCheckForTimeOut+0xbc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d007      	beq.n	8005862 <xTaskCheckForTimeOut+0x7e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	e015      	b.n	800588e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	429a      	cmp	r2, r3
 800586a:	d20b      	bcs.n	8005884 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ff9d 	bl	80057b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	e004      	b.n	800588e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800588a:	2301      	movs	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800588e:	f000 ff43 	bl	8006718 <vPortExitCritical>

	return xReturn;
 8005892:	69fb      	ldr	r3, [r7, #28]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20000bc0 	.word	0x20000bc0
 80058a0:	20000bd4 	.word	0x20000bd4

080058a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058a8:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <vTaskMissedYield+0x14>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
}
 80058ae:	bf00      	nop
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20000bd0 	.word	0x20000bd0

080058bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058c4:	f000 f852 	bl	800596c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058c8:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <prvIdleTask+0x28>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d9f9      	bls.n	80058c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <prvIdleTask+0x2c>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058e0:	e7f0      	b.n	80058c4 <prvIdleTask+0x8>
 80058e2:	bf00      	nop
 80058e4:	200006ec 	.word	0x200006ec
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058f2:	2300      	movs	r3, #0
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	e00c      	b.n	8005912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4a12      	ldr	r2, [pc, #72]	; (800594c <prvInitialiseTaskLists+0x60>)
 8005904:	4413      	add	r3, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe f952 	bl	8003bb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3301      	adds	r3, #1
 8005910:	607b      	str	r3, [r7, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b37      	cmp	r3, #55	; 0x37
 8005916:	d9ef      	bls.n	80058f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005918:	480d      	ldr	r0, [pc, #52]	; (8005950 <prvInitialiseTaskLists+0x64>)
 800591a:	f7fe f949 	bl	8003bb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800591e:	480d      	ldr	r0, [pc, #52]	; (8005954 <prvInitialiseTaskLists+0x68>)
 8005920:	f7fe f946 	bl	8003bb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005924:	480c      	ldr	r0, [pc, #48]	; (8005958 <prvInitialiseTaskLists+0x6c>)
 8005926:	f7fe f943 	bl	8003bb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800592a:	480c      	ldr	r0, [pc, #48]	; (800595c <prvInitialiseTaskLists+0x70>)
 800592c:	f7fe f940 	bl	8003bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005930:	480b      	ldr	r0, [pc, #44]	; (8005960 <prvInitialiseTaskLists+0x74>)
 8005932:	f7fe f93d 	bl	8003bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <prvInitialiseTaskLists+0x78>)
 8005938:	4a05      	ldr	r2, [pc, #20]	; (8005950 <prvInitialiseTaskLists+0x64>)
 800593a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800593c:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <prvInitialiseTaskLists+0x7c>)
 800593e:	4a05      	ldr	r2, [pc, #20]	; (8005954 <prvInitialiseTaskLists+0x68>)
 8005940:	601a      	str	r2, [r3, #0]
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200006ec 	.word	0x200006ec
 8005950:	20000b4c 	.word	0x20000b4c
 8005954:	20000b60 	.word	0x20000b60
 8005958:	20000b7c 	.word	0x20000b7c
 800595c:	20000b90 	.word	0x20000b90
 8005960:	20000ba8 	.word	0x20000ba8
 8005964:	20000b74 	.word	0x20000b74
 8005968:	20000b78 	.word	0x20000b78

0800596c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005972:	e019      	b.n	80059a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005974:	f000 fea2 	bl	80066bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005978:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <prvCheckTasksWaitingTermination+0x4c>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe f99d 	bl	8003cc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <prvCheckTasksWaitingTermination+0x50>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3b01      	subs	r3, #1
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <prvCheckTasksWaitingTermination+0x50>)
 8005992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvCheckTasksWaitingTermination+0x54>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3b01      	subs	r3, #1
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <prvCheckTasksWaitingTermination+0x54>)
 800599c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800599e:	f000 febb 	bl	8006718 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f80e 	bl	80059c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <prvCheckTasksWaitingTermination+0x54>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e1      	bne.n	8005974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000b90 	.word	0x20000b90
 80059bc:	20000bbc 	.word	0x20000bbc
 80059c0:	20000ba4 	.word	0x20000ba4

080059c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d108      	bne.n	80059e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f84a 	bl	8006a74 <vPortFree>
				vPortFree( pxTCB );
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 f847 	bl	8006a74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059e6:	e017      	b.n	8005a18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d103      	bne.n	80059fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 f83e 	bl	8006a74 <vPortFree>
	}
 80059f8:	e00e      	b.n	8005a18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d009      	beq.n	8005a18 <prvDeleteTCB+0x54>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e7fe      	b.n	8005a16 <prvDeleteTCB+0x52>
	}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a26:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <prvResetNextTaskUnblockTime+0x44>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <prvResetNextTaskUnblockTime+0x14>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <prvResetNextTaskUnblockTime+0x16>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <prvResetNextTaskUnblockTime+0x48>)
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a42:	e008      	b.n	8005a56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <prvResetNextTaskUnblockTime+0x44>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4a05      	ldr	r2, [pc, #20]	; (8005a68 <prvResetNextTaskUnblockTime+0x48>)
 8005a54:	6013      	str	r3, [r2, #0]
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000b74 	.word	0x20000b74
 8005a68:	20000bdc 	.word	0x20000bdc

08005a6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005a72:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <xTaskGetCurrentTaskHandle+0x1c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005a78:	687b      	ldr	r3, [r7, #4]
	}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	200006e8 	.word	0x200006e8

08005a8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <xTaskGetSchedulerState+0x34>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	e008      	b.n	8005ab2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa0:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <xTaskGetSchedulerState+0x38>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	e001      	b.n	8005ab2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ab2:	687b      	ldr	r3, [r7, #4]
	}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	20000bc8 	.word	0x20000bc8
 8005ac4:	20000be4 	.word	0x20000be4

08005ac8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d056      	beq.n	8005b8c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <xTaskPriorityInherit+0xd0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d246      	bcs.n	8005b7a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db06      	blt.n	8005b02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af4:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <xTaskPriorityInherit+0xd0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6959      	ldr	r1, [r3, #20]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <xTaskPriorityInherit+0xd4>)
 8005b14:	4413      	add	r3, r2
 8005b16:	4299      	cmp	r1, r3
 8005b18:	d101      	bne.n	8005b1e <xTaskPriorityInherit+0x56>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xTaskPriorityInherit+0x58>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d022      	beq.n	8005b6a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe f8cb 	bl	8003cc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <xTaskPriorityInherit+0xd0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <xTaskPriorityInherit+0xd8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d903      	bls.n	8005b4c <xTaskPriorityInherit+0x84>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <xTaskPriorityInherit+0xd8>)
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <xTaskPriorityInherit+0xd4>)
 8005b5a:	441a      	add	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4619      	mov	r1, r3
 8005b62:	4610      	mov	r0, r2
 8005b64:	f7fe f851 	bl	8003c0a <vListInsertEnd>
 8005b68:	e004      	b.n	8005b74 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <xTaskPriorityInherit+0xd0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b74:	2301      	movs	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e008      	b.n	8005b8c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <xTaskPriorityInherit+0xd0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d201      	bcs.n	8005b8c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200006e8 	.word	0x200006e8
 8005b9c:	200006ec 	.word	0x200006ec
 8005ba0:	20000bc4 	.word	0x20000bc4

08005ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d054      	beq.n	8005c64 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bba:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <xTaskPriorityDisinherit+0xcc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d009      	beq.n	8005bd8 <xTaskPriorityDisinherit+0x34>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e7fe      	b.n	8005bd6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <xTaskPriorityDisinherit+0x50>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	e7fe      	b.n	8005bf2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf8:	1e5a      	subs	r2, r3, #1
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d02c      	beq.n	8005c64 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d128      	bne.n	8005c64 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe f854 	bl	8003cc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <xTaskPriorityDisinherit+0xd0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d903      	bls.n	8005c44 <xTaskPriorityDisinherit+0xa0>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <xTaskPriorityDisinherit+0xd0>)
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <xTaskPriorityDisinherit+0xd4>)
 8005c52:	441a      	add	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f7fd ffd5 	bl	8003c0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c64:	697b      	ldr	r3, [r7, #20]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	200006e8 	.word	0x200006e8
 8005c74:	20000bc4 	.word	0x20000bc4
 8005c78:	200006ec 	.word	0x200006ec

08005c7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d06d      	beq.n	8005d70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d109      	bne.n	8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e7fe      	b.n	8005cae <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d902      	bls.n	8005cc0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e002      	b.n	8005cc6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d04f      	beq.n	8005d70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d14a      	bne.n	8005d70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005cda:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d109      	bne.n	8005cf8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	e7fe      	b.n	8005cf6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	db04      	blt.n	8005d16 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	6959      	ldr	r1, [r3, #20]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d26:	4413      	add	r3, r2
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	d101      	bne.n	8005d30 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01c      	beq.n	8005d70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fd ffc2 	bl	8003cc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d903      	bls.n	8005d54 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	4a0b      	ldr	r2, [pc, #44]	; (8005d80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4a06      	ldr	r2, [pc, #24]	; (8005d7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d62:	441a      	add	r2, r3
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f7fd ff4d 	bl	8003c0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d70:	bf00      	nop
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200006e8 	.word	0x200006e8
 8005d7c:	200006ec 	.word	0x200006ec
 8005d80:	20000bc4 	.word	0x20000bc4

08005d84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d88:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d96:	3201      	adds	r2, #1
 8005d98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005d9a:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
	}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	200006e8 	.word	0x200006e8

08005dac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005db6:	4b21      	ldr	r3, [pc, #132]	; (8005e3c <prvAddCurrentTaskToDelayedList+0x90>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dbc:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fd ff7e 	bl	8003cc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dce:	d10a      	bne.n	8005de6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d007      	beq.n	8005de6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	; (8005e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4819      	ldr	r0, [pc, #100]	; (8005e44 <prvAddCurrentTaskToDelayedList+0x98>)
 8005de0:	f7fd ff13 	bl	8003c0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005de4:	e026      	b.n	8005e34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dee:	4b14      	ldr	r3, [pc, #80]	; (8005e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d209      	bcs.n	8005e12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fd ff21 	bl	8003c52 <vListInsert>
}
 8005e10:	e010      	b.n	8005e34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e12:	4b0e      	ldr	r3, [pc, #56]	; (8005e4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f7fd ff17 	bl	8003c52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d202      	bcs.n	8005e34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e2e:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6013      	str	r3, [r2, #0]
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000bc0 	.word	0x20000bc0
 8005e40:	200006e8 	.word	0x200006e8
 8005e44:	20000ba8 	.word	0x20000ba8
 8005e48:	20000b78 	.word	0x20000b78
 8005e4c:	20000b74 	.word	0x20000b74
 8005e50:	20000bdc 	.word	0x20000bdc

08005e54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	; 0x28
 8005e58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e5e:	f000 fac3 	bl	80063e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <xTimerCreateTimerTask+0x80>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d021      	beq.n	8005eae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e72:	1d3a      	adds	r2, r7, #4
 8005e74:	f107 0108 	add.w	r1, r7, #8
 8005e78:	f107 030c 	add.w	r3, r7, #12
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fd fe7d 	bl	8003b7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	9202      	str	r2, [sp, #8]
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2300      	movs	r3, #0
 8005e92:	460a      	mov	r2, r1
 8005e94:	4910      	ldr	r1, [pc, #64]	; (8005ed8 <xTimerCreateTimerTask+0x84>)
 8005e96:	4811      	ldr	r0, [pc, #68]	; (8005edc <xTimerCreateTimerTask+0x88>)
 8005e98:	f7fe ffde 	bl	8004e58 <xTaskCreateStatic>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <xTimerCreateTimerTask+0x8c>)
 8005ea0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ea2:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <xTimerCreateTimerTask+0x8c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d109      	bne.n	8005ec8 <xTimerCreateTimerTask+0x74>
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	e7fe      	b.n	8005ec6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005ec8:	697b      	ldr	r3, [r7, #20]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000c18 	.word	0x20000c18
 8005ed8:	08006d64 	.word	0x08006d64
 8005edc:	08005ffd 	.word	0x08005ffd
 8005ee0:	20000c1c 	.word	0x20000c1c

08005ee4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <xTimerGenericCommand+0x2c>
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	e7fe      	b.n	8005f0e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f10:	4b19      	ldr	r3, [pc, #100]	; (8005f78 <xTimerGenericCommand+0x94>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d02a      	beq.n	8005f6e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	dc18      	bgt.n	8005f5c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f2a:	f7ff fdaf 	bl	8005a8c <xTaskGetSchedulerState>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d109      	bne.n	8005f48 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f34:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <xTimerGenericCommand+0x94>)
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	f107 0110 	add.w	r1, r7, #16
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f40:	f7fe f940 	bl	80041c4 <xQueueGenericSend>
 8005f44:	6278      	str	r0, [r7, #36]	; 0x24
 8005f46:	e012      	b.n	8005f6e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <xTimerGenericCommand+0x94>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	f107 0110 	add.w	r1, r7, #16
 8005f50:	2300      	movs	r3, #0
 8005f52:	2200      	movs	r2, #0
 8005f54:	f7fe f936 	bl	80041c4 <xQueueGenericSend>
 8005f58:	6278      	str	r0, [r7, #36]	; 0x24
 8005f5a:	e008      	b.n	8005f6e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <xTimerGenericCommand+0x94>)
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	f107 0110 	add.w	r1, r7, #16
 8005f64:	2300      	movs	r3, #0
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	f7fe fa26 	bl	80043b8 <xQueueGenericSendFromISR>
 8005f6c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3728      	adds	r7, #40	; 0x28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000c18 	.word	0x20000c18

08005f7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f86:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <prvProcessExpiredTimer+0x7c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fd fe95 	bl	8003cc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d121      	bne.n	8005fe6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	18d1      	adds	r1, r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	6978      	ldr	r0, [r7, #20]
 8005fb0:	f000 f8c8 	bl	8006144 <prvInsertTimerInActiveList>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d015      	beq.n	8005fe6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6978      	ldr	r0, [r7, #20]
 8005fc6:	f7ff ff8d 	bl	8005ee4 <xTimerGenericCommand>
 8005fca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <prvProcessExpiredTimer+0x6a>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e7fe      	b.n	8005fe4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	6978      	ldr	r0, [r7, #20]
 8005fec:	4798      	blx	r3
}
 8005fee:	bf00      	nop
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000c10 	.word	0x20000c10

08005ffc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006004:	f107 0308 	add.w	r3, r7, #8
 8006008:	4618      	mov	r0, r3
 800600a:	f000 f857 	bl	80060bc <prvGetNextExpireTime>
 800600e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4619      	mov	r1, r3
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f803 	bl	8006020 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800601a:	f000 f8d5 	bl	80061c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800601e:	e7f1      	b.n	8006004 <prvTimerTask+0x8>

08006020 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800602a:	f7ff f941 	bl	80052b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800602e:	f107 0308 	add.w	r3, r7, #8
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f866 	bl	8006104 <prvSampleTimeNow>
 8006038:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d130      	bne.n	80060a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <prvProcessTimerOrBlockTask+0x3c>
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	429a      	cmp	r2, r3
 800604c:	d806      	bhi.n	800605c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800604e:	f7ff f93d 	bl	80052cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ff91 	bl	8005f7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800605a:	e024      	b.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006062:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <prvProcessTimerOrBlockTask+0x90>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	bf0c      	ite	eq
 800606c:	2301      	moveq	r3, #1
 800606e:	2300      	movne	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006074:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <prvProcessTimerOrBlockTask+0x94>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	f7fe feb5 	bl	8004df0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006086:	f7ff f921 	bl	80052cc <xTaskResumeAll>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <prvProcessTimerOrBlockTask+0x98>)
 8006092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
}
 80060a0:	e001      	b.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060a2:	f7ff f913 	bl	80052cc <xTaskResumeAll>
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20000c14 	.word	0x20000c14
 80060b4:	20000c18 	.word	0x20000c18
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <prvGetNextExpireTime+0x44>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bf0c      	ite	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	2300      	movne	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <prvGetNextExpireTime+0x44>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e001      	b.n	80060f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000c10 	.word	0x20000c10

08006104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800610c:	f7ff f97a 	bl	8005404 <xTaskGetTickCount>
 8006110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <prvSampleTimeNow+0x3c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	429a      	cmp	r2, r3
 800611a:	d205      	bcs.n	8006128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800611c:	f000 f904 	bl	8006328 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	e002      	b.n	800612e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800612e:	4a04      	ldr	r2, [pc, #16]	; (8006140 <prvSampleTimeNow+0x3c>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000c20 	.word	0x20000c20

08006144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d812      	bhi.n	8006190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	429a      	cmp	r2, r3
 8006176:	d302      	bcc.n	800617e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e01b      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800617e:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <prvInsertTimerInActiveList+0x7c>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3304      	adds	r3, #4
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f7fd fd62 	bl	8003c52 <vListInsert>
 800618e:	e012      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d206      	bcs.n	80061a6 <prvInsertTimerInActiveList+0x62>
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d302      	bcc.n	80061a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e007      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061a6:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <prvInsertTimerInActiveList+0x80>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f7fd fd4e 	bl	8003c52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061b6:	697b      	ldr	r3, [r7, #20]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000c14 	.word	0x20000c14
 80061c4:	20000c10 	.word	0x20000c10

080061c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	; 0x38
 80061cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ce:	e099      	b.n	8006304 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da17      	bge.n	8006206 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	3304      	adds	r3, #4
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <prvProcessReceivedCommands+0x2e>
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e7fe      	b.n	80061f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061fc:	6850      	ldr	r0, [r2, #4]
 80061fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006200:	6892      	ldr	r2, [r2, #8]
 8006202:	4611      	mov	r1, r2
 8006204:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db7a      	blt.n	8006302 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	3304      	adds	r3, #4
 800621c:	4618      	mov	r0, r3
 800621e:	f7fd fd51 	bl	8003cc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006222:	463b      	mov	r3, r7
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff ff6d 	bl	8006104 <prvSampleTimeNow>
 800622a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b09      	cmp	r3, #9
 8006230:	d868      	bhi.n	8006304 <prvProcessReceivedCommands+0x13c>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <prvProcessReceivedCommands+0x70>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	08006261 	.word	0x08006261
 800623c:	08006261 	.word	0x08006261
 8006240:	08006261 	.word	0x08006261
 8006244:	08006305 	.word	0x08006305
 8006248:	080062bb 	.word	0x080062bb
 800624c:	080062f1 	.word	0x080062f1
 8006250:	08006261 	.word	0x08006261
 8006254:	08006261 	.word	0x08006261
 8006258:	08006305 	.word	0x08006305
 800625c:	080062bb 	.word	0x080062bb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	18d1      	adds	r1, r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626e:	f7ff ff69 	bl	8006144 <prvInsertTimerInActiveList>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d045      	beq.n	8006304 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d13d      	bne.n	8006304 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	441a      	add	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	2100      	movs	r1, #0
 8006298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800629a:	f7ff fe23 	bl	8005ee4 <xTimerGenericCommand>
 800629e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d12e      	bne.n	8006304 <prvProcessReceivedCommands+0x13c>
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e7fe      	b.n	80062b8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <prvProcessReceivedCommands+0x114>
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	e7fe      	b.n	80062da <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	18d1      	adds	r1, r2, r3
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ea:	f7ff ff2b 	bl	8006144 <prvInsertTimerInActiveList>
					break;
 80062ee:	e009      	b.n	8006304 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80062fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062fc:	f000 fbba 	bl	8006a74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006300:	e000      	b.n	8006304 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006302:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <prvProcessReceivedCommands+0x15c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	1d39      	adds	r1, r7, #4
 800630a:	2200      	movs	r2, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe f971 	bl	80045f4 <xQueueReceive>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	f47f af5b 	bne.w	80061d0 <prvProcessReceivedCommands+0x8>
	}
}
 800631a:	bf00      	nop
 800631c:	3730      	adds	r7, #48	; 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000c18 	.word	0x20000c18

08006328 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800632e:	e044      	b.n	80063ba <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <prvSwitchTimerLists+0xb8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800633a:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <prvSwitchTimerLists+0xb8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3304      	adds	r3, #4
 8006348:	4618      	mov	r0, r3
 800634a:	f7fd fcbb 	bl	8003cc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d12d      	bne.n	80063ba <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d90e      	bls.n	800638e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800637c:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <prvSwitchTimerLists+0xb8>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f7fd fc63 	bl	8003c52 <vListInsert>
 800638c:	e015      	b.n	80063ba <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800638e:	2300      	movs	r3, #0
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	2300      	movs	r3, #0
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	2100      	movs	r1, #0
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff fda3 	bl	8005ee4 <xTimerGenericCommand>
 800639e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <prvSwitchTimerLists+0x92>
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	e7fe      	b.n	80063b8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <prvSwitchTimerLists+0xb8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1b5      	bne.n	8006330 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063c4:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <prvSwitchTimerLists+0xb8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <prvSwitchTimerLists+0xbc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <prvSwitchTimerLists+0xb8>)
 80063d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <prvSwitchTimerLists+0xbc>)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	6013      	str	r3, [r2, #0]
}
 80063d8:	bf00      	nop
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000c10 	.word	0x20000c10
 80063e4:	20000c14 	.word	0x20000c14

080063e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063ee:	f000 f965 	bl	80066bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <prvCheckForValidListAndQueue+0x60>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d120      	bne.n	800643c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063fa:	4814      	ldr	r0, [pc, #80]	; (800644c <prvCheckForValidListAndQueue+0x64>)
 80063fc:	f7fd fbd8 	bl	8003bb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006400:	4813      	ldr	r0, [pc, #76]	; (8006450 <prvCheckForValidListAndQueue+0x68>)
 8006402:	f7fd fbd5 	bl	8003bb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006406:	4b13      	ldr	r3, [pc, #76]	; (8006454 <prvCheckForValidListAndQueue+0x6c>)
 8006408:	4a10      	ldr	r2, [pc, #64]	; (800644c <prvCheckForValidListAndQueue+0x64>)
 800640a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800640c:	4b12      	ldr	r3, [pc, #72]	; (8006458 <prvCheckForValidListAndQueue+0x70>)
 800640e:	4a10      	ldr	r2, [pc, #64]	; (8006450 <prvCheckForValidListAndQueue+0x68>)
 8006410:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006412:	2300      	movs	r3, #0
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4b11      	ldr	r3, [pc, #68]	; (800645c <prvCheckForValidListAndQueue+0x74>)
 8006418:	4a11      	ldr	r2, [pc, #68]	; (8006460 <prvCheckForValidListAndQueue+0x78>)
 800641a:	2110      	movs	r1, #16
 800641c:	200a      	movs	r0, #10
 800641e:	f7fd fce3 	bl	8003de8 <xQueueGenericCreateStatic>
 8006422:	4602      	mov	r2, r0
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <prvCheckForValidListAndQueue+0x60>)
 8006426:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <prvCheckForValidListAndQueue+0x60>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <prvCheckForValidListAndQueue+0x60>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	490b      	ldr	r1, [pc, #44]	; (8006464 <prvCheckForValidListAndQueue+0x7c>)
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fc88 	bl	8004d4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800643c:	f000 f96c 	bl	8006718 <vPortExitCritical>
}
 8006440:	bf00      	nop
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000c18 	.word	0x20000c18
 800644c:	20000be8 	.word	0x20000be8
 8006450:	20000bfc 	.word	0x20000bfc
 8006454:	20000c10 	.word	0x20000c10
 8006458:	20000c14 	.word	0x20000c14
 800645c:	20000cc4 	.word	0x20000cc4
 8006460:	20000c24 	.word	0x20000c24
 8006464:	08006d6c 	.word	0x08006d6c

08006468 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3b04      	subs	r3, #4
 8006478:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b04      	subs	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3b04      	subs	r3, #4
 8006496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006498:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <pxPortInitialiseStack+0x64>)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3b14      	subs	r3, #20
 80064a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b04      	subs	r3, #4
 80064ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f06f 0202 	mvn.w	r2, #2
 80064b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3b20      	subs	r3, #32
 80064bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	080064d1 	.word	0x080064d1

080064d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <prvTaskExitError+0x50>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e2:	d009      	beq.n	80064f8 <prvTaskExitError+0x28>
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e7fe      	b.n	80064f6 <prvTaskExitError+0x26>
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800650a:	bf00      	nop
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0fc      	beq.n	800650c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	2000000c 	.word	0x2000000c
	...

08006530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006558:	4808      	ldr	r0, [pc, #32]	; (800657c <prvPortStartFirstTask+0x24>)
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f380 8808 	msr	MSP, r0
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8814 	msr	CONTROL, r0
 800656a:	b662      	cpsie	i
 800656c:	b661      	cpsie	f
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	df00      	svc	0
 8006578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800657a:	bf00      	nop
 800657c:	e000ed08 	.word	0xe000ed08

08006580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006586:	4b44      	ldr	r3, [pc, #272]	; (8006698 <xPortStartScheduler+0x118>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a44      	ldr	r2, [pc, #272]	; (800669c <xPortStartScheduler+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d109      	bne.n	80065a4 <xPortStartScheduler+0x24>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	e7fe      	b.n	80065a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065a4:	4b3c      	ldr	r3, [pc, #240]	; (8006698 <xPortStartScheduler+0x118>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a3d      	ldr	r2, [pc, #244]	; (80066a0 <xPortStartScheduler+0x120>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d109      	bne.n	80065c2 <xPortStartScheduler+0x42>
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e7fe      	b.n	80065c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <xPortStartScheduler+0x124>)
 80065c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	22ff      	movs	r2, #255	; 0xff
 80065d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	4b30      	ldr	r3, [pc, #192]	; (80066a8 <xPortStartScheduler+0x128>)
 80065e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065ea:	4b30      	ldr	r3, [pc, #192]	; (80066ac <xPortStartScheduler+0x12c>)
 80065ec:	2207      	movs	r2, #7
 80065ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f0:	e009      	b.n	8006606 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80065f2:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <xPortStartScheduler+0x12c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	4a2c      	ldr	r2, [pc, #176]	; (80066ac <xPortStartScheduler+0x12c>)
 80065fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b80      	cmp	r3, #128	; 0x80
 8006610:	d0ef      	beq.n	80065f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006612:	4b26      	ldr	r3, [pc, #152]	; (80066ac <xPortStartScheduler+0x12c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f1c3 0307 	rsb	r3, r3, #7
 800661a:	2b04      	cmp	r3, #4
 800661c:	d009      	beq.n	8006632 <xPortStartScheduler+0xb2>
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60bb      	str	r3, [r7, #8]
 8006630:	e7fe      	b.n	8006630 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006632:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <xPortStartScheduler+0x12c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	4a1c      	ldr	r2, [pc, #112]	; (80066ac <xPortStartScheduler+0x12c>)
 800663a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800663c:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <xPortStartScheduler+0x12c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006644:	4a19      	ldr	r2, [pc, #100]	; (80066ac <xPortStartScheduler+0x12c>)
 8006646:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006650:	4b17      	ldr	r3, [pc, #92]	; (80066b0 <xPortStartScheduler+0x130>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a16      	ldr	r2, [pc, #88]	; (80066b0 <xPortStartScheduler+0x130>)
 8006656:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800665a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800665c:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <xPortStartScheduler+0x130>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <xPortStartScheduler+0x130>)
 8006662:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006666:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006668:	f000 f8d6 	bl	8006818 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800666c:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <xPortStartScheduler+0x134>)
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006672:	f000 f8f5 	bl	8006860 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006676:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <xPortStartScheduler+0x138>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0f      	ldr	r2, [pc, #60]	; (80066b8 <xPortStartScheduler+0x138>)
 800667c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006680:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006682:	f7ff ff69 	bl	8006558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006686:	f7fe ff8b 	bl	80055a0 <vTaskSwitchContext>
	prvTaskExitError();
 800668a:	f7ff ff21 	bl	80064d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	e000ed00 	.word	0xe000ed00
 800669c:	410fc271 	.word	0x410fc271
 80066a0:	410fc270 	.word	0x410fc270
 80066a4:	e000e400 	.word	0xe000e400
 80066a8:	20000d14 	.word	0x20000d14
 80066ac:	20000d18 	.word	0x20000d18
 80066b0:	e000ed20 	.word	0xe000ed20
 80066b4:	2000000c 	.word	0x2000000c
 80066b8:	e000ef34 	.word	0xe000ef34

080066bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <vPortEnterCritical+0x54>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <vPortEnterCritical+0x54>)
 80066dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <vPortEnterCritical+0x54>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d10e      	bne.n	8006704 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <vPortEnterCritical+0x58>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d009      	beq.n	8006704 <vPortEnterCritical+0x48>
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	e7fe      	b.n	8006702 <vPortEnterCritical+0x46>
	}
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	2000000c 	.word	0x2000000c
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800671e:	4b11      	ldr	r3, [pc, #68]	; (8006764 <vPortExitCritical+0x4c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <vPortExitCritical+0x22>
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	e7fe      	b.n	8006738 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800673a:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <vPortExitCritical+0x4c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3b01      	subs	r3, #1
 8006740:	4a08      	ldr	r2, [pc, #32]	; (8006764 <vPortExitCritical+0x4c>)
 8006742:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006744:	4b07      	ldr	r3, [pc, #28]	; (8006764 <vPortExitCritical+0x4c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <vPortExitCritical+0x3e>
 800674c:	2300      	movs	r3, #0
 800674e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	2000000c 	.word	0x2000000c
	...

08006770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006770:	f3ef 8009 	mrs	r0, PSP
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <pxCurrentTCBConst>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f01e 0f10 	tst.w	lr, #16
 8006780:	bf08      	it	eq
 8006782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	6010      	str	r0, [r2, #0]
 800678c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006794:	f380 8811 	msr	BASEPRI, r0
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f7fe fefe 	bl	80055a0 <vTaskSwitchContext>
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f380 8811 	msr	BASEPRI, r0
 80067ac:	bc09      	pop	{r0, r3}
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	6808      	ldr	r0, [r1, #0]
 80067b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b6:	f01e 0f10 	tst.w	lr, #16
 80067ba:	bf08      	it	eq
 80067bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067c0:	f380 8809 	msr	PSP, r0
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst>:
 80067d0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067f0:	f7fe fe18 	bl	8005424 <xTaskIncrementTick>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <SysTick_Handler+0x3c>)
 80067fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <vPortSetupTimerInterrupt+0x34>)
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <vPortSetupTimerInterrupt+0x38>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006828:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <vPortSetupTimerInterrupt+0x3c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <vPortSetupTimerInterrupt+0x40>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	099b      	lsrs	r3, r3, #6
 8006834:	4a09      	ldr	r2, [pc, #36]	; (800685c <vPortSetupTimerInterrupt+0x44>)
 8006836:	3b01      	subs	r3, #1
 8006838:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800683a:	4b04      	ldr	r3, [pc, #16]	; (800684c <vPortSetupTimerInterrupt+0x34>)
 800683c:	2207      	movs	r2, #7
 800683e:	601a      	str	r2, [r3, #0]
}
 8006840:	bf00      	nop
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	e000e010 	.word	0xe000e010
 8006850:	e000e018 	.word	0xe000e018
 8006854:	20000000 	.word	0x20000000
 8006858:	10624dd3 	.word	0x10624dd3
 800685c:	e000e014 	.word	0xe000e014

08006860 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006860:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006870 <vPortEnableVFP+0x10>
 8006864:	6801      	ldr	r1, [r0, #0]
 8006866:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800686a:	6001      	str	r1, [r0, #0]
 800686c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800686e:	bf00      	nop
 8006870:	e000ed88 	.word	0xe000ed88

08006874 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800687a:	f3ef 8305 	mrs	r3, IPSR
 800687e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b0f      	cmp	r3, #15
 8006884:	d913      	bls.n	80068ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006886:	4a16      	ldr	r2, [pc, #88]	; (80068e0 <vPortValidateInterruptPriority+0x6c>)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006890:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <vPortValidateInterruptPriority+0x70>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	7afa      	ldrb	r2, [r7, #11]
 8006896:	429a      	cmp	r2, r3
 8006898:	d209      	bcs.n	80068ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	e7fe      	b.n	80068ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068ae:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <vPortValidateInterruptPriority+0x74>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <vPortValidateInterruptPriority+0x78>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d909      	bls.n	80068d2 <vPortValidateInterruptPriority+0x5e>
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	e7fe      	b.n	80068d0 <vPortValidateInterruptPriority+0x5c>
	}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	e000e3f0 	.word	0xe000e3f0
 80068e4:	20000d14 	.word	0x20000d14
 80068e8:	e000ed0c 	.word	0xe000ed0c
 80068ec:	20000d18 	.word	0x20000d18

080068f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	; 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068fc:	f7fe fcd8 	bl	80052b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006900:	4b57      	ldr	r3, [pc, #348]	; (8006a60 <pvPortMalloc+0x170>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006908:	f000 f90c 	bl	8006b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800690c:	4b55      	ldr	r3, [pc, #340]	; (8006a64 <pvPortMalloc+0x174>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4013      	ands	r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 808c 	bne.w	8006a32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01c      	beq.n	800695a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006920:	2208      	movs	r2, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4413      	add	r3, r2
 8006926:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	2b00      	cmp	r3, #0
 8006930:	d013      	beq.n	800695a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f023 0307 	bic.w	r3, r3, #7
 8006938:	3308      	adds	r3, #8
 800693a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <pvPortMalloc+0x6a>
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e7fe      	b.n	8006958 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d068      	beq.n	8006a32 <pvPortMalloc+0x142>
 8006960:	4b41      	ldr	r3, [pc, #260]	; (8006a68 <pvPortMalloc+0x178>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d863      	bhi.n	8006a32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800696a:	4b40      	ldr	r3, [pc, #256]	; (8006a6c <pvPortMalloc+0x17c>)
 800696c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800696e:	4b3f      	ldr	r3, [pc, #252]	; (8006a6c <pvPortMalloc+0x17c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006974:	e004      	b.n	8006980 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	429a      	cmp	r2, r3
 8006988:	d903      	bls.n	8006992 <pvPortMalloc+0xa2>
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f1      	bne.n	8006976 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006992:	4b33      	ldr	r3, [pc, #204]	; (8006a60 <pvPortMalloc+0x170>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006998:	429a      	cmp	r2, r3
 800699a:	d04a      	beq.n	8006a32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2208      	movs	r2, #8
 80069a2:	4413      	add	r3, r2
 80069a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	1ad2      	subs	r2, r2, r3
 80069b6:	2308      	movs	r3, #8
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d91e      	bls.n	80069fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4413      	add	r3, r2
 80069c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <pvPortMalloc+0xf4>
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	e7fe      	b.n	80069e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	1ad2      	subs	r2, r2, r3
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069f6:	69b8      	ldr	r0, [r7, #24]
 80069f8:	f000 f8f6 	bl	8006be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <pvPortMalloc+0x178>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <pvPortMalloc+0x178>)
 8006a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <pvPortMalloc+0x178>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <pvPortMalloc+0x180>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d203      	bcs.n	8006a1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <pvPortMalloc+0x178>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <pvPortMalloc+0x180>)
 8006a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <pvPortMalloc+0x174>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a32:	f7fe fc4b 	bl	80052cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <pvPortMalloc+0x164>
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	e7fe      	b.n	8006a52 <pvPortMalloc+0x162>
	return pvReturn;
 8006a54:	69fb      	ldr	r3, [r7, #28]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3728      	adds	r7, #40	; 0x28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20001924 	.word	0x20001924
 8006a64:	20001930 	.word	0x20001930
 8006a68:	20001928 	.word	0x20001928
 8006a6c:	2000191c 	.word	0x2000191c
 8006a70:	2000192c 	.word	0x2000192c

08006a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d046      	beq.n	8006b14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a86:	2308      	movs	r3, #8
 8006a88:	425b      	negs	r3, r3
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	4b20      	ldr	r3, [pc, #128]	; (8006b1c <vPortFree+0xa8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d109      	bne.n	8006ab6 <vPortFree+0x42>
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e7fe      	b.n	8006ab4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <vPortFree+0x5e>
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	60bb      	str	r3, [r7, #8]
 8006ad0:	e7fe      	b.n	8006ad0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <vPortFree+0xa8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d019      	beq.n	8006b14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d115      	bne.n	8006b14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <vPortFree+0xa8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006af8:	f7fe fbda 	bl	80052b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <vPortFree+0xac>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4413      	add	r3, r2
 8006b06:	4a06      	ldr	r2, [pc, #24]	; (8006b20 <vPortFree+0xac>)
 8006b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b0a:	6938      	ldr	r0, [r7, #16]
 8006b0c:	f000 f86c 	bl	8006be8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b10:	f7fe fbdc 	bl	80052cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b14:	bf00      	nop
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20001930 	.word	0x20001930
 8006b20:	20001928 	.word	0x20001928

08006b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b30:	4b27      	ldr	r3, [pc, #156]	; (8006bd0 <prvHeapInit+0xac>)
 8006b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00c      	beq.n	8006b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3307      	adds	r3, #7
 8006b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0307 	bic.w	r3, r3, #7
 8006b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	4a1f      	ldr	r2, [pc, #124]	; (8006bd0 <prvHeapInit+0xac>)
 8006b54:	4413      	add	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b5c:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <prvHeapInit+0xb0>)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b62:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <prvHeapInit+0xb0>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b70:	2208      	movs	r2, #8
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0307 	bic.w	r3, r3, #7
 8006b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <prvHeapInit+0xb4>)
 8006b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b86:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <prvHeapInit+0xb4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b8e:	4b12      	ldr	r3, [pc, #72]	; (8006bd8 <prvHeapInit+0xb4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	1ad2      	subs	r2, r2, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <prvHeapInit+0xb4>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <prvHeapInit+0xb8>)
 8006bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <prvHeapInit+0xbc>)
 8006bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bbc:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <prvHeapInit+0xc0>)
 8006bbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bc2:	601a      	str	r2, [r3, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	20000d1c 	.word	0x20000d1c
 8006bd4:	2000191c 	.word	0x2000191c
 8006bd8:	20001924 	.word	0x20001924
 8006bdc:	2000192c 	.word	0x2000192c
 8006be0:	20001928 	.word	0x20001928
 8006be4:	20001930 	.word	0x20001930

08006be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bf0:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <prvInsertBlockIntoFreeList+0xac>)
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	e002      	b.n	8006bfc <prvInsertBlockIntoFreeList+0x14>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d8f7      	bhi.n	8006bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d108      	bne.n	8006c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	441a      	add	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	441a      	add	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d118      	bne.n	8006c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	4b15      	ldr	r3, [pc, #84]	; (8006c98 <prvInsertBlockIntoFreeList+0xb0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d00d      	beq.n	8006c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	441a      	add	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	e008      	b.n	8006c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c66:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <prvInsertBlockIntoFreeList+0xb0>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	e003      	b.n	8006c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d002      	beq.n	8006c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	2000191c 	.word	0x2000191c
 8006c98:	20001924 	.word	0x20001924

08006c9c <__libc_init_array>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4e0d      	ldr	r6, [pc, #52]	; (8006cd4 <__libc_init_array+0x38>)
 8006ca0:	4c0d      	ldr	r4, [pc, #52]	; (8006cd8 <__libc_init_array+0x3c>)
 8006ca2:	1ba4      	subs	r4, r4, r6
 8006ca4:	10a4      	asrs	r4, r4, #2
 8006ca6:	2500      	movs	r5, #0
 8006ca8:	42a5      	cmp	r5, r4
 8006caa:	d109      	bne.n	8006cc0 <__libc_init_array+0x24>
 8006cac:	4e0b      	ldr	r6, [pc, #44]	; (8006cdc <__libc_init_array+0x40>)
 8006cae:	4c0c      	ldr	r4, [pc, #48]	; (8006ce0 <__libc_init_array+0x44>)
 8006cb0:	f000 f82c 	bl	8006d0c <_init>
 8006cb4:	1ba4      	subs	r4, r4, r6
 8006cb6:	10a4      	asrs	r4, r4, #2
 8006cb8:	2500      	movs	r5, #0
 8006cba:	42a5      	cmp	r5, r4
 8006cbc:	d105      	bne.n	8006cca <__libc_init_array+0x2e>
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cc4:	4798      	blx	r3
 8006cc6:	3501      	adds	r5, #1
 8006cc8:	e7ee      	b.n	8006ca8 <__libc_init_array+0xc>
 8006cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cce:	4798      	blx	r3
 8006cd0:	3501      	adds	r5, #1
 8006cd2:	e7f2      	b.n	8006cba <__libc_init_array+0x1e>
 8006cd4:	08006e2c 	.word	0x08006e2c
 8006cd8:	08006e2c 	.word	0x08006e2c
 8006cdc:	08006e2c 	.word	0x08006e2c
 8006ce0:	08006e30 	.word	0x08006e30

08006ce4 <memcpy>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	1e43      	subs	r3, r0, #1
 8006ce8:	440a      	add	r2, r1
 8006cea:	4291      	cmp	r1, r2
 8006cec:	d100      	bne.n	8006cf0 <memcpy+0xc>
 8006cee:	bd10      	pop	{r4, pc}
 8006cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf8:	e7f7      	b.n	8006cea <memcpy+0x6>

08006cfa <memset>:
 8006cfa:	4402      	add	r2, r0
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d100      	bne.n	8006d04 <memset+0xa>
 8006d02:	4770      	bx	lr
 8006d04:	f803 1b01 	strb.w	r1, [r3], #1
 8006d08:	e7f9      	b.n	8006cfe <memset+0x4>
	...

08006d0c <_init>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr

08006d18 <_fini>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	bf00      	nop
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr
